<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://p-dhanush.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://p-dhanush.github.io/" rel="alternate" type="text/html" /><updated>2025-10-18T22:30:25+05:30</updated><id>https://p-dhanush.github.io/feed.xml</id><title type="html">P-Dhanush</title><entry><title type="html">Classes</title><link href="https://p-dhanush.github.io/2025/10/17/classes.html" rel="alternate" type="text/html" title="Classes" /><published>2025-10-17T00:00:00+05:30</published><updated>2025-10-17T00:00:00+05:30</updated><id>https://p-dhanush.github.io/2025/10/17/classes</id><content type="html" xml:base="https://p-dhanush.github.io/2025/10/17/classes.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Structs</title><link href="https://p-dhanush.github.io/2025/10/17/structs.html" rel="alternate" type="text/html" title="Structs" /><published>2025-10-17T00:00:00+05:30</published><updated>2025-10-17T00:00:00+05:30</updated><id>https://p-dhanush.github.io/2025/10/17/structs</id><content type="html" xml:base="https://p-dhanush.github.io/2025/10/17/structs.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Pointers &amp;amp; References</title><link href="https://p-dhanush.github.io/notes/2025/10/16/pointers_and-references.html" rel="alternate" type="text/html" title="Pointers &amp;amp; References" /><published>2025-10-16T10:30:00+05:30</published><updated>2025-10-16T10:30:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/16/pointers_and-references</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/16/pointers_and-references.html"><![CDATA[<h1 id="pointers--references">Pointers &amp; References</h1>

<ul id="markdown-toc">
  <li><a href="#pointers--references" id="markdown-toc-pointers--references">Pointers &amp; References</a>    <ul>
      <li><a href="#pointer" id="markdown-toc-pointer">Pointer</a>        <ul>
          <li><a href="#indirection" id="markdown-toc-indirection">Indirection</a></li>
          <li><a href="#optionality" id="markdown-toc-optionality">Optionality</a></li>
          <li><a href="#polymorphism" id="markdown-toc-polymorphism">Polymorphism</a>            <ul>
              <li><a href="#object-slicing-porblem-without-pointers-loses-derived-info" id="markdown-toc-object-slicing-porblem-without-pointers-loses-derived-info">Object Slicing Porblem without Pointers (loses derived info)</a></li>
            </ul>
          </li>
          <li><a href="#copying-vs-moving" id="markdown-toc-copying-vs-moving">Copying vs Moving</a></li>
          <li><a href="#when-to-use-pointers" id="markdown-toc-when-to-use-pointers">When to use Pointers</a>            <ul>
              <li><a href="#dynamic-allocation-heap-memory" id="markdown-toc-dynamic-allocation-heap-memory">Dynamic Allocation (heap memory)</a></li>
              <li><a href="#linked-data-structures-trees-graphs-etc" id="markdown-toc-linked-data-structures-trees-graphs-etc">Linked Data Structures (Trees, Graphs, etc.)</a></li>
              <li><a href="#polymorpism-dynamic-dispatch" id="markdown-toc-polymorpism-dynamic-dispatch">Polymorpism (Dynamic Dispatch)</a></li>
              <li><a href="#avoiding-copies-performance--semantics-references" id="markdown-toc-avoiding-copies-performance--semantics-references">Avoiding Copies (Performance &amp; Semantics) {<em>REFERENCES</em>}</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#reference-what-is-it" id="markdown-toc-reference-what-is-it">Reference? What is it?</a></li>
      <li><a href="#reference-to-a-pointer" id="markdown-toc-reference-to-a-pointer">Reference to a Pointer</a>        <ul>
          <li><a href="#when-we-use-this" id="markdown-toc-when-we-use-this">When we use this</a></li>
          <li><a href="#examples" id="markdown-toc-examples">Examples</a>            <ul>
              <li><a href="#1-freeing-heap-memory" id="markdown-toc-1-freeing-heap-memory">1. Freeing Heap Memory</a></li>
              <li><a href="#2-taking-ownership" id="markdown-toc-2-taking-ownership">2. Taking Ownership</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="pointer">Pointer</h2>
<p>A <strong>pointer</strong> holds the <em>address</em> of an object or <code class="language-plaintext highlighter-rouge">nullptr</code>. Use pointers when you need <em>indirection</em>, <em>optionality</em>, <em>polymorphism</em>. Prefer smart pointers (std::unique_ptr, std::shared_ptr) for ownership. Use raw pointers for non-owning observation.</p>

<h4 id="indirection">Indirection</h4>
<p>Accessing an object through something else (an address/handle) rather than directly.
Consider Widget to have a paint() method belonging to it, and if we want to access it -&gt;</p>
<ul>
  <li>Direct: <code class="language-plaintext highlighter-rouge">Widget w; w.paint();</code></li>
  <li>Indirect: <code class="language-plaintext highlighter-rouge">Widget* p = &amp;w; p-&gt;paint();</code> (you go “through” a pointer)</li>
  <li>References (<code class="language-plaintext highlighter-rouge">T&amp;</code>) are also indirection: <code class="language-plaintext highlighter-rouge">Widget&amp; r = w; r.paint();</code>. References are discussed in detail below.</li>
</ul>

<p>Uses-&gt;</p>
<ul>
  <li>Pointing to different objects at runtime (reseating)
  less fancily, to simply point to differet objects while running.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">Animal</span><span class="o">*</span> <span class="n">pet</span><span class="p">;</span>

  <span class="n">Dog</span> <span class="n">dog</span><span class="p">;</span>
  <span class="n">Cat</span> <span class="n">cat</span><span class="p">;</span>

  <span class="n">pet</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dog</span><span class="p">;</span>
  <span class="n">pet</span><span class="o">-&gt;</span><span class="n">speak</span><span class="p">();</span>  <span class="c1">// Woof!</span>

  <span class="n">pet</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cat</span><span class="p">;</span>
  <span class="n">pet</span><span class="o">-&gt;</span><span class="n">speak</span><span class="p">();</span>  <span class="c1">// Meow!</span>
</code></pre></div>    </div>
    <p>We aren’t creating new memory, we’re simply making it point to different objects.</p>
  </li>
  <li>Point to something that lives elsewhere (on heap, pool, library)
    <ul>
      <li>
        <p>When we want create something that outlives the current scope
  By default, variables in C++ have automatic (static) lifetimes.</p>

        <p>That means:
  When a function ends, all local variables are destroyed — their memory is automatically cleaned up.</p>

        <p>So if we create an object inside a function, and try to return a pointer to it — we’d be pointing to garbage after the function ends!</p>

        <p>Example:</p>
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span><span class="o">*</span> <span class="nf">makeNumber</span><span class="p">()</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>      <span class="c1">// x lives only inside this function</span>
      <span class="k">return</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">;</span>      <span class="c1">//  BAD: x will be destroyed when function ends</span>
  <span class="p">}</span>

  <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">makeNumber</span><span class="p">();</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>  <span class="c1">//  Undefined behavior: x is already gone!</span>
</code></pre></div>        </div>

        <p>Solution:</p>
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span><span class="o">*</span> <span class="nf">makeNumber</span><span class="p">()</span> <span class="p">{</span>
      <span class="kt">int</span><span class="o">*</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>   <span class="c1">// x lives on the heap now!</span>
      <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">makeNumber</span><span class="p">();</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">//  Works: memory still exists</span>
  <span class="k">delete</span> <span class="n">ptr</span><span class="p">;</span>  <span class="c1">//  must free it when done</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Don’t know size/type during compile time. Will need to be allocated on heap.</p>
      </li>
      <li>
        <p>Created by a library and given to us</p>
      </li>
    </ul>
  </li>
  <li>Needed for polymorphism (call virtual methods through a base handle)
Virtual functions only work through pointers or references. This is explained in detail in the polymorphism section below.</li>
</ul>

<h4 id="optionality">Optionality</h4>
<p>A value may be present or may be absent.
Ways to model optionality in C++:</p>
<ul>
  <li>Raw pointer: <code class="language-plaintext highlighter-rouge">T*</code> (use nullptr for “absent”). Non-owning by default.</li>
  <li><code class="language-plaintext highlighter-rouge">std::optional&lt;T&gt;</code>: the object may or may not exist (by value).</li>
  <li><code class="language-plaintext highlighter-rouge">std::optional&lt;std::reference_wrapper&lt;T&gt;&gt;</code>: optional reference-like without null refs.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Non-owning, nullable handle</span>
<span class="kt">void</span> <span class="nf">maybe_draw</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">*</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">w</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>  <span class="c1">// absent</span>
    <span class="n">w</span><span class="o">-&gt;</span><span class="n">paint</span><span class="p">();</span>      <span class="c1">// present</span>
<span class="p">}</span>

<span class="c1">// Optional by value (copies or moves T)</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">find_index</span><span class="p">(</span><span class="kt">bool</span> <span class="n">hit</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hit</span><span class="p">)</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="polymorphism">Polymorphism</h4>
<p>Allows one interface (e.g. a function call) to work with different types of objects.
<strong>Call the right function for the right object</strong></p>

<p>Example -</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">speak</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Animal speaks"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Dog</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">speak</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Woof!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cat</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">speak</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Meow!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p><a href="https://hackernoon.com/understanding-dynamic-polymorphism-in-c">*Above code snippet reference (dynamic polymorphism in c)</a></p>

<h5 id="object-slicing-porblem-without-pointers-loses-derived-info">Object Slicing Porblem without Pointers (loses derived info)</h5>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// IF WE USE POINTERS -</span>
<span class="n">Animal</span><span class="o">*</span> <span class="n">a1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Dog</span><span class="p">();</span>
<span class="n">Animal</span><span class="o">*</span> <span class="n">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Cat</span><span class="p">();</span>
<span class="n">a1</span><span class="o">-&gt;</span><span class="n">speak</span><span class="p">();</span>  <span class="c1">// Output: Woof!</span>
<span class="n">a2</span><span class="o">-&gt;</span><span class="n">speak</span><span class="p">();</span>  <span class="c1">// Output: Meow!</span>

<span class="c1">// ELSE!</span>
<span class="n">Dog</span> <span class="n">d</span><span class="p">;</span>
<span class="n">Animal</span> <span class="n">a</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span> <span class="c1">// Object slicing!</span>
<span class="n">a</span><span class="p">.</span><span class="n">speak</span><span class="p">();</span>    <span class="c1">// Output: Animal speaks</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Animal</code> is the base class (aka parent class)
<code class="language-plaintext highlighter-rouge">Dog</code> is the derived class (aka child class)
When we use a pointer, a pointer to <code class="language-plaintext highlighter-rouge">Animal</code> is actually pointing to a <code class="language-plaintext highlighter-rouge">Dog</code> object.
Since <code class="language-plaintext highlighter-rouge">speak()</code> is declared <code class="language-plaintext highlighter-rouge">virtual</code> in <code class="language-plaintext highlighter-rouge">Animal</code>, C++ uses the virtual table (vtable) mechanism to resolve the function at runtime.
The call to <code class="language-plaintext highlighter-rouge">a1-&gt;speak()</code> goes to <code class="language-plaintext highlighter-rouge">Dog::speak()</code> because the actual object is a Dog.</p>

<p><strong>Here, virtual dispatch kicks in. Polymorphism works.</strong></p>

<h4 id="copying-vs-moving">Copying vs Moving</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">int</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// simple pointer copy</span>
<span class="k">delete</span> <span class="n">a</span><span class="p">;</span>
<span class="k">delete</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// ❌ undefined behavior (double delete)</span>
</code></pre></div></div>

<p>This is becasue it looks like -&gt;</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">a</span> <span class="err">─┬──▶</span> <span class="o">[</span> <span class="nt">int</span><span class="o">:</span> <span class="err">42</span> <span class="o">]</span>
   <span class="err">│</span>
<span class="nt">b</span> <span class="err">─┘</span>
</code></pre></div></div>

<p>This can be avoided without <code class="language-plaintext highlighter-rouge">unique_ptr</code>:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>

<span class="c1">// arranged like:</span>
 <span class="n">a</span> <span class="err">───▶</span> <span class="p">[</span> <span class="kt">int</span><span class="o">:</span> <span class="mi">42</span> <span class="p">]</span> <span class="p">(</span><span class="n">on</span> <span class="n">heap</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="c1">// a is now nullptr, b owns the int</span>
</code></pre></div></div>

<h3 id="when-to-use-pointers">When to use Pointers</h3>

<h4 id="dynamic-allocation-heap-memory">Dynamic Allocation (heap memory)</h4>
<p><code class="language-plaintext highlighter-rouge">Animal* a = new Dog();  // Heap allocation</code>
We need to make sure to mange memory in these cases, using <code class="language-plaintext highlighter-rouge">delete</code> or smart pointers like <code class="language-plaintext highlighter-rouge">unique_ptr</code>.</p>

<h4 id="linked-data-structures-trees-graphs-etc">Linked Data Structures (Trees, Graphs, etc.)</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="polymorpism-dynamic-dispatch">Polymorpism (Dynamic Dispatch)</h4>

<h4 id="avoiding-copies-performance--semantics-references">Avoiding Copies (Performance &amp; Semantics) {<em>REFERENCES</em>}</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">process</span><span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">);</span> <span class="c1">// no copy</span>
</code></pre></div></div>

<hr />

<h2 id="reference-what-is-it">Reference? What is it?</h2>

<p>✅ A reference is an alias to an existing variable.</p>
<ul>
  <li>It’s not a new object</li>
  <li>It refers to the same memory as the original</li>
  <li>After initialization, a reference cannot be changed to refer to something else</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="kt">int</span><span class="o">&amp;</span> <span class="n">ref_to_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>

<span class="n">ref_to_x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// Yields 100.</span>
</code></pre></div></div>

<h2 id="reference-to-a-pointer">Reference to a Pointer</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">closefile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">File</span><span class="o">*&amp;</span> <span class="n">f</span><span class="p">){</span> <span class="c1">// Here we are referencing a pointer. file must be a pointer.</span>
    <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
        <span class="n">f</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// This will allow us to directly manipulate where f is pointing to.</span>
</code></pre></div></div>

<p>A relevant pass by value mistake –&gt;
If we had done this instead. The pointer that was passed by value ultimately leads to the same location. File would definitely be closed. However, we’d have a dangling pointer. We need to set the original itself to null.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// If we did something like -&gt;</span>
<span class="kt">void</span> <span class="nf">safeclose_wrong</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">File</span><span class="o">*</span> <span class="n">f</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
        <span class="n">f</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// We are actually getting a copy of the pointer instead. We aren't setting the original pointer to nullptr.</span>
</code></pre></div></div>

<h3 id="when-we-use-this">When we use this</h3>

<p><strong>To modify a caller’s pointer itself</strong>
When would we want to modify?</p>
<ul>
  <li>You’re managing dynamic memory</li>
  <li>You’re closing or freeing a resource</li>
  <li>You want to prevent reuse of a now-invalid pointer</li>
</ul>

<p><strong>Stealing a resource</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>  <span class="c1">// b now owns it, a is nullptr</span>
</code></pre></div></div>
<p>Here, <code class="language-plaintext highlighter-rouge">a</code> no longer owns the pointer — <code class="language-plaintext highlighter-rouge">b</code> “stole” it.</p>

<h3 id="examples">Examples</h3>

<h4 id="1-freeing-heap-memory">1. Freeing Heap Memory</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">safe_delete</span><span class="p">(</span><span class="kt">int</span><span class="o">*&amp;</span> <span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="n">ptr</span><span class="p">;</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="n">safe_delete</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>  <span class="c1">// cleans and nulls p</span>

</code></pre></div></div>

<h4 id="2-taking-ownership">2. Taking Ownership</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">take_ownership</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">&gt;&amp;</span> <span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">do_something</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">ptr</span><span class="p">));</span>  <span class="c1">// ptr becomes nullptr</span>
<span class="p">}</span>

<span class="c1">// caller:</span>
<span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">&gt;</span><span class="p">();</span>
<span class="n">take_ownership</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="c1">// p is now nullptr, ownership transferred</span>

</code></pre></div></div>

<p>NEED TO PUT INFO std::move AND MOVE SEMANTICS IN DETAIL IN A RELEVANT PLAC EWITH PROPER SEGUE, LINK THIS TO CONSTRUCTORS.</p>]]></content><author><name></name></author><category term="notes" /><category term="cpp" /></entry><entry><title type="html">CPP Learnings</title><link href="https://p-dhanush.github.io/notes/2025/10/15/cpplearnings.html" rel="alternate" type="text/html" title="CPP Learnings" /><published>2025-10-15T10:30:00+05:30</published><updated>2025-10-15T10:30:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/15/cpplearnings</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/15/cpplearnings.html"><![CDATA[<h1 id="cpp---learnings--notes">CPP - Learnings &amp; Notes</h1>

<ul id="markdown-toc">
  <li><a href="#cpp---learnings--notes" id="markdown-toc-cpp---learnings--notes">CPP - Learnings &amp; Notes</a>    <ul>
      <li><a href="#reading-the-language-hopefully-like-a-professional" id="markdown-toc-reading-the-language-hopefully-like-a-professional">Reading the Language (hopefully like a professional)</a>        <ul>
          <li><a href="#value-categories" id="markdown-toc-value-categories">Value Categories</a></li>
          <li><a href="#lifetime--storage" id="markdown-toc-lifetime--storage">Lifetime &amp; Storage</a></li>
          <li><a href="#odr-one-definition-rule" id="markdown-toc-odr-one-definition-rule">ODR One Definition Rule</a></li>
        </ul>
      </li>
      <li><a href="#object-model--memory" id="markdown-toc-object-model--memory">Object Model &amp; Memory</a>        <ul>
          <li><a href="#layouts-and-invariants" id="markdown-toc-layouts-and-invariants">Layouts and Invariants</a></li>
          <li><a href="#ownerships-vs-views" id="markdown-toc-ownerships-vs-views">Ownerships vs Views</a>            <ul>
              <li><a href="#non-owning-views-string_view-span" id="markdown-toc-non-owning-views-string_view-span">Non-owning Views: string_view, span<T></T></a></li>
            </ul>
          </li>
          <li><a href="#small-buffer-optimizations-sbo" id="markdown-toc-small-buffer-optimizations-sbo">Small Buffer Optimizations (SBO)</a></li>
          <li><a href="#allocators" id="markdown-toc-allocators">Allocators</a></li>
        </ul>
      </li>
      <li><a href="#constructor-initialization-and-destruction" id="markdown-toc-constructor-initialization-and-destruction">Constructor, Initialization and Destruction</a>        <ul>
          <li><a href="#member-initializer-lists" id="markdown-toc-member-initializer-lists">Member-Initializer lists</a>            <ul>
              <li><a href="#construction-vs-assignment" id="markdown-toc-construction-vs-assignment">Construction vs Assignment</a></li>
              <li><a href="#initialization-order--declaration-order" id="markdown-toc-initialization-order--declaration-order">Initialization Order = Declaration Order</a></li>
            </ul>
          </li>
          <li><a href="#special-member-functions-rule-of-035-of-thumbs-defaulted--deleted" id="markdown-toc-special-member-functions-rule-of-035-of-thumbs-defaulted--deleted">Special Member Functions: rule of 0/3/5/-of-thumbs; defaulted &amp; deleted</a></li>
          <li><a href="#explicit-vs-implicit-constructors--conversions" id="markdown-toc-explicit-vs-implicit-constructors--conversions">Explicit vs Implicit constructors &amp; conversions</a></li>
          <li><a href="#uniform-initialization-brace-elision-most-vexing-parse-how-to-avoid" id="markdown-toc-uniform-initialization-brace-elision-most-vexing-parse-how-to-avoid">Uniform initialization, brace elision, most vexing parse (how to avoid)</a></li>
        </ul>
      </li>
      <li><a href="#value-semantics-moves--perfect-forwarding" id="markdown-toc-value-semantics-moves--perfect-forwarding">value semantics, moves &amp; perfect forwarding</a>        <ul>
          <li><a href="#value-semantics-vs-reference-semantics" id="markdown-toc-value-semantics-vs-reference-semantics">Value Semantics vs Reference Semantics</a></li>
          <li><a href="#reference-vs-pointer-semantics" id="markdown-toc-reference-vs-pointer-semantics">Reference vs Pointer Semantics</a>            <ul>
              <li><a href="#-key-differences" id="markdown-toc--key-differences">🔍 Key Differences</a></li>
              <li><a href="#example-reference-vs-pointer" id="markdown-toc-example-reference-vs-pointer">Example: Reference vs Pointer</a></li>
            </ul>
          </li>
          <li><a href="#move-semantics" id="markdown-toc-move-semantics">Move Semantics</a></li>
          <li><a href="#copy-vs-move-when-moves-actually-happen-move-after-move-validity" id="markdown-toc-copy-vs-move-when-moves-actually-happen-move-after-move-validity">Copy vs move: when moves actually happen; move-after-move validity</a></li>
          <li><a href="#pass-by-value--move-vs-t-perfect-forwarding-parameter-patterns" id="markdown-toc-pass-by-value--move-vs-t-perfect-forwarding-parameter-patterns">Pass-by-value + move vs T&amp;&amp; perfect-forwarding parameter patterns</a></li>
          <li><a href="#return-value-optimization-rvo-nrvo-and-nodiscard" id="markdown-toc-return-value-optimization-rvo-nrvo-and-nodiscard">Return Value Optimization (RVO), NRVO, and [[nodiscard]]</a></li>
        </ul>
      </li>
      <li><a href="#functions-linkage-and-the-build-model" id="markdown-toc-functions-linkage-and-the-build-model">functions, linkage, and the build model</a>        <ul>
          <li><a href="#headers-vs-source-files-declarations-definitions" id="markdown-toc-headers-vs-source-files-declarations-definitions">Headers vs source files: declarations, definitions</a></li>
          <li><a href="#inline-functions--variables-c17-static-in-headers-anonymous-namespaces" id="markdown-toc-inline-functions--variables-c17-static-in-headers-anonymous-namespaces">Inline functions &amp; variables (C++17+); static in headers; anonymous namespaces</a></li>
          <li><a href="#templates-where-to-put-definitions-explicit-instantiation-to-shrink-abi" id="markdown-toc-templates-where-to-put-definitions-explicit-instantiation-to-shrink-abi">Templates: where to put definitions; explicit instantiation to shrink ABI</a></li>
          <li><a href="#pimpl-to-stabilize-abi-and-speed-up-builds" id="markdown-toc-pimpl-to-stabilize-abi-and-speed-up-builds">PIMPL to stabilize ABI and speed up builds</a></li>
        </ul>
      </li>
      <li><a href="#error-handling--contracts" id="markdown-toc-error-handling--contracts">error handling &amp; contracts</a>        <ul>
          <li><a href="#exceptions-vs-status-codes-strongbasicnothrow-guarantees" id="markdown-toc-exceptions-vs-status-codes-strongbasicnothrow-guarantees">Exceptions vs status codes; strong/basic/nothrow guarantees</a></li>
          <li><a href="#noexcept-correctness-unwinding-costs-raii-as-the-backbone" id="markdown-toc-noexcept-correctness-unwinding-costs-raii-as-the-backbone">noexcept correctness; unwinding costs; RAII as the backbone</a></li>
          <li><a href="#assertions-preconditions-postconditions-and-expectsensures-style" id="markdown-toc-assertions-preconditions-postconditions-and-expectsensures-style">Assertions, preconditions, postconditions (and [[expects]]/[[ensures]] style)</a></li>
        </ul>
      </li>
      <li><a href="#interfaces--ownership-apis" id="markdown-toc-interfaces--ownership-apis">interfaces &amp; ownership APIs</a>        <ul>
          <li><a href="#function-parameters-input-string_view-span-output-stdstring-vector-return-value-in-out" id="markdown-toc-function-parameters-input-string_view-span-output-stdstring-vector-return-value-in-out">Function parameters: input (string_view, span<const T="">), output (std::string&amp;, vector&amp;, return value), in-out</const></a></li>
          <li><a href="#avoiding-allocations-at-boundaries-reserve-append-fmt-vs-ostringstream" id="markdown-toc-avoiding-allocations-at-boundaries-reserve-append-fmt-vs-ostringstream">Avoiding allocations at boundaries: reserve, append, fmt vs ostringstream</a></li>
          <li><a href="#stdoptional-expected-if-available-and-error-transport" id="markdown-toc-stdoptional-expected-if-available-and-error-transport">std::optional, expected (if available), and error transport</a></li>
        </ul>
      </li>
      <li><a href="#containers--iterators" id="markdown-toc-containers--iterators">containers &amp; iterators</a>        <ul>
          <li><a href="#choosing-the-right-container-mapunordered_mapflat_map" id="markdown-toc-choosing-the-right-container-mapunordered_mapflat_map">Choosing the right container (map/unordered_map/flat_map)</a></li>
          <li><a href="#iterator-invalidation-rules-node-vs-contiguous-containers" id="markdown-toc-iterator-invalidation-rules-node-vs-contiguous-containers">Iterator invalidation rules; node vs contiguous containers</a></li>
          <li><a href="#views-and-ranges-c20-lazy-pipelines-stdrangesviews" id="markdown-toc-views-and-ranges-c20-lazy-pipelines-stdrangesviews">Views and ranges (C++20): lazy pipelines, std::ranges::views</a></li>
        </ul>
      </li>
      <li><a href="#strings-text-and-formatting" id="markdown-toc-strings-text-and-formatting">strings, text, and formatting</a>        <ul>
          <li><a href="#stdstring-vs-string_view-utf-8-realities-slicing--lifetime" id="markdown-toc-stdstring-vs-string_view-utf-8-realities-slicing--lifetime">std::string vs string_view; UTF-8 realities; slicing &amp; lifetime</a></li>
          <li><a href="#formatting-stdformat-c20-compile-time-format-checks-log-sinks" id="markdown-toc-formatting-stdformat-c20-compile-time-format-checks-log-sinks">Formatting: std::format (C++20), compile-time format checks; log sinks</a></li>
        </ul>
      </li>
      <li><a href="#filesystem--io" id="markdown-toc-filesystem--io">filesystem &amp; I/O</a>        <ul>
          <li><a href="#stdfilesystempath-ties-back-to-your-ctor" id="markdown-toc-stdfilesystempath-ties-back-to-your-ctor">std::filesystem::path (ties back to your ctor)</a></li>
          <li><a href="#buffered-vs-unbuffered-io-memory-mapped-files-sync-vs-async" id="markdown-toc-buffered-vs-unbuffered-io-memory-mapped-files-sync-vs-async">Buffered vs unbuffered I/O; memory-mapped files; sync vs async</a></li>
          <li><a href="#binary-vs-text-endian--struct-packing" id="markdown-toc-binary-vs-text-endian--struct-packing">Binary vs text; endian &amp; struct packing</a></li>
        </ul>
      </li>
      <li><a href="#concurrency--atomics" id="markdown-toc-concurrency--atomics">concurrency &amp; atomics</a>        <ul>
          <li><a href="#stdthread-executors-when-available-futures" id="markdown-toc-stdthread-executors-when-available-futures">std::thread, executors (when available), futures</a></li>
          <li><a href="#data-races-memory-orders-relaxed-acq_rel-seq_cst" id="markdown-toc-data-races-memory-orders-relaxed-acq_rel-seq_cst">Data races, memory orders (relaxed, acq_rel, seq_cst)</a></li>
          <li><a href="#lock-free-basics-stdatomic_ref-hazards--aba" id="markdown-toc-lock-free-basics-stdatomic_ref-hazards--aba">Lock-free basics; std::atomic_ref; hazards &amp; ABA</a></li>
        </ul>
      </li>
      <li><a href="#templates--generic-programming" id="markdown-toc-templates--generic-programming">templates &amp; generic programming</a>        <ul>
          <li><a href="#concepts--constraints-sfinae--requires-clauses" id="markdown-toc-concepts--constraints-sfinae--requires-clauses">Concepts &amp; constraints; SFINAE → requires-clauses</a></li>
          <li><a href="#perfect-forwarding-constructors-ctad-policy-based-design" id="markdown-toc-perfect-forwarding-constructors-ctad-policy-based-design">Perfect-forwarding constructors; CTAD; policy-based design</a></li>
          <li><a href="#crtp-and-zero-overhead-abstractions" id="markdown-toc-crtp-and-zero-overhead-abstractions">CRTP and zero-overhead abstractions</a></li>
        </ul>
      </li>
      <li><a href="#performance-engineering" id="markdown-toc-performance-engineering">performance engineering</a>        <ul>
          <li><a href="#copy-elision-small-objects-cache-friendliness" id="markdown-toc-copy-elision-small-objects-cache-friendliness">Copy elision, small objects, cache friendliness</a></li>
          <li><a href="#avoiding-virtual-when-hot-devirtualization-final" id="markdown-toc-avoiding-virtual-when-hot-devirtualization-final">Avoiding virtual when hot; devirtualization; final</a></li>
          <li><a href="#measuring-not-guessing-godbolt-perf-vtune-cachegrind" id="markdown-toc-measuring-not-guessing-godbolt-perf-vtune-cachegrind">Measuring, not guessing: godbolt, perf, VTune, Cachegrind</a></li>
        </ul>
      </li>
      <li><a href="#tooling--hygiene" id="markdown-toc-tooling--hygiene">tooling &amp; hygiene</a>        <ul>
          <li><a href="#warnings-as-errors-sanitizers-static-analyzers" id="markdown-toc-warnings-as-errors-sanitizers-static-analyzers">Warnings as errors; sanitizers; static analyzers</a></li>
          <li><a href="#cmake-idioms-modules-when-practical" id="markdown-toc-cmake-idioms-modules-when-practical">CMake idioms; modules (when practical)</a></li>
          <li><a href="#coding-guidelines-es20-nl26-r11-gotwcppcoreguidelines" id="markdown-toc-coding-guidelines-es20-nl26-r11-gotwcppcoreguidelines">Coding guidelines: ES.20, NL.26, R.11 (GotW/CppCoreGuidelines)</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<h2 id="reading-the-language-hopefully-like-a-professional">Reading the Language (hopefully like a professional)</h2>

<h3 id="value-categories">Value Categories</h3>
<h3 id="lifetime--storage">Lifetime &amp; Storage</h3>
<h3 id="odr-one-definition-rule">ODR One Definition Rule</h3>

<h2 id="object-model--memory">Object Model &amp; Memory</h2>

<h3 id="layouts-and-invariants">Layouts and Invariants</h3>

<h3 id="ownerships-vs-views">Ownerships vs Views</h3>

<h4 id="non-owning-views-string_view-span">Non-owning Views: string_view, span<T></T></h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Idea: separate ownership from access. Views are pointer+length, no allocation.
- std::string_view: read-only contiguous chars; lifetime must outlive the view.
- std::span&lt;T&gt;: typed view over contiguous T[]/vector&lt;T&gt;; read or read-write.
- Rule: Prefer views for parameters; avoid storing them unless you control lifetime.
- Patterns: “own + view” (own std::string, keep string_view member bound to it).
</code></pre></div></div>

<h3 id="small-buffer-optimizations-sbo">Small Buffer Optimizations (SBO)</h3>

<h3 id="allocators">Allocators</h3>

<h2 id="constructor-initialization-and-destruction">Constructor, Initialization and Destruction</h2>

<h3 id="member-initializer-lists">Member-Initializer lists</h3>

<h4 id="construction-vs-assignment">Construction vs Assignment</h4>
<h4 id="initialization-order--declaration-order">Initialization Order = Declaration Order</h4>

<h3 id="special-member-functions-rule-of-035-of-thumbs-defaulted--deleted">Special Member Functions: rule of 0/3/5/-of-thumbs; defaulted &amp; deleted</h3>
<h3 id="explicit-vs-implicit-constructors--conversions">Explicit vs Implicit constructors &amp; conversions</h3>

<p>Implicit &amp; Explicit Conversions</p>

<p>A <em>non-explicit</em> constructor that can be called with a single argument enables implicit conversion:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Meter</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">v</span><span class="p">;</span>
  <span class="n">Meter</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">v</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{}</span>  <span class="c1">// implicit conversion from double -&gt; Meter</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">Meter</span> <span class="n">m</span><span class="p">);</span>
<span class="n">f</span><span class="p">(</span><span class="mf">3.0</span><span class="p">);</span>  <span class="c1">// OK: 3.0 implicitly becomes Meter{3.0}</span>
</code></pre></div></div>
<p>Make it <code class="language-plaintext highlighter-rouge">explicit</code> to ban that implicit conversion (but still allow direct initialization):</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Meter</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">v</span><span class="p">;</span>
  <span class="k">explicit</span> <span class="n">Meter</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">v</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="n">f</span><span class="p">(</span><span class="mf">3.0</span><span class="p">);</span>           <span class="c1">// ERROR: no implicit conversion</span>
<span class="n">f</span><span class="p">(</span><span class="n">Meter</span><span class="p">{</span><span class="mf">3.0</span><span class="p">});</span>    <span class="c1">// OK: direct-init</span>
<span class="n">Meter</span> <span class="n">m</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span>    <span class="c1">// ERROR: copy-init uses implicit conversion</span>
<span class="n">Meter</span> <span class="n">m</span><span class="p">{</span><span class="mf">3.0</span><span class="p">};</span>     <span class="c1">// OK: direct-list-init</span>

</code></pre></div></div>

<p>This goes the other way as well, when we don’t wish to let our type be implicitly cast and used for another purpose. e.g,</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">ID</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
  <span class="k">explicit</span> <span class="k">operator</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">s</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// only explicit casts allowed</span>
<span class="p">};</span>

<span class="n">ID</span> <span class="n">id</span><span class="p">{</span><span class="s">"abc"</span><span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">a</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>        <span class="c1">// ERROR</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">b</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> <span class="c1">// OK</span>

</code></pre></div></div>

<p>Notes:</p>
<ul>
  <li>
    <p>Even multi-parameter ctors can enable implicit conversion if all but one have defaults; explicit still useful.</p>
  </li>
  <li>
    <p>Places where implicit conversions happen: copy-initialization (T x = a;), passing args, returning from functions, conditional operator, etc.</p>
  </li>
</ul>

<h3 id="uniform-initialization-brace-elision-most-vexing-parse-how-to-avoid">Uniform initialization, brace elision, most vexing parse (how to avoid)</h3>

<h2 id="value-semantics-moves--perfect-forwarding">value semantics, moves &amp; perfect forwarding</h2>
<h3 id="value-semantics-vs-reference-semantics">Value Semantics vs Reference Semantics</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- `T` vs `const T&amp;`
    - Passing `T` by value copies the object.
    - Passing `const T&amp;` avoids copying; just an alias. Also this a read only reference.
    - Prefer `const T&amp;` for large/user-defined types (like `std::string`, `std::vector`).

- `&amp;v` when `v` is `const T&amp;`: gives address of the original object.
    - Even though `v` is a reference, `&amp;v` is just the address of the actual object.
</code></pre></div></div>

<h3 id="reference-vs-pointer-semantics">Reference vs Pointer Semantics</h3>

<p>Both <strong>references</strong> (<code class="language-plaintext highlighter-rouge">const T&amp;</code>) and <strong>pointers</strong> (<code class="language-plaintext highlighter-rouge">const T*</code>) give access to an object’s memory, but are used in different contexts.</p>

<h5 id="-key-differences">🔍 Key Differences</h5>

<table>
  <thead>
    <tr>
      <th>Concept</th>
      <th><code class="language-plaintext highlighter-rouge">const T&amp; v</code> (reference)</th>
      <th><code class="language-plaintext highlighter-rouge">const T* p</code> (pointer)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Usage</td>
      <td>Clean syntax: <code class="language-plaintext highlighter-rouge">func(obj)</code></td>
      <td>Must pass address: <code class="language-plaintext highlighter-rouge">func(&amp;obj)</code></td>
    </tr>
    <tr>
      <td>Nullability</td>
      <td>🔒 Cannot be null</td>
      <td>⚠️ Can be null</td>
    </tr>
    <tr>
      <td>Rebinding</td>
      <td>❌ Cannot be reseated</td>
      <td>✅ Can point to different objects</td>
    </tr>
    <tr>
      <td>Access</td>
      <td>Like a normal object: <code class="language-plaintext highlighter-rouge">v.size()</code></td>
      <td>Requires dereferencing: <code class="language-plaintext highlighter-rouge">p-&gt;size()</code></td>
    </tr>
    <tr>
      <td>Use Case</td>
      <td>Default for safe aliasing, no mutation</td>
      <td>Use for optional, low-level, or C APIs</td>
    </tr>
  </tbody>
</table>

<p>References are ideal for most read-only function arguments where null is not allowed.</p>

<hr />

<h4 id="example-reference-vs-pointer">Example: Reference vs Pointer</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">print_ref</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hi"</span><span class="p">;</span>
<span class="n">print_ref</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>     <span class="c1">// ✅ clean</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">print_ptr</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hi"</span><span class="p">;</span>
<span class="n">print_ptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>    <span class="c1">// ✅ must pass an address explicitly</span>
</code></pre></div></div>

<h3 id="move-semantics">Move Semantics</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- `std::move(obj)` → casts an lvalue to an rvalue reference
- Allows you to transfer ownership without copying
- Used in initializer lists: `: member_(std::move(param))`
- Also used in function returns
</code></pre></div></div>

<h3 id="copy-vs-move-when-moves-actually-happen-move-after-move-validity">Copy vs move: when moves actually happen; move-after-move validity</h3>

<h3 id="pass-by-value--move-vs-t-perfect-forwarding-parameter-patterns">Pass-by-value + move vs T&amp;&amp; perfect-forwarding parameter patterns</h3>

<h3 id="return-value-optimization-rvo-nrvo-and-nodiscard">Return Value Optimization (RVO), NRVO, and [[nodiscard]]</h3>

<h2 id="functions-linkage-and-the-build-model">functions, linkage, and the build model</h2>

<h3 id="headers-vs-source-files-declarations-definitions">Headers vs source files: declarations, definitions</h3>

<h3 id="inline-functions--variables-c17-static-in-headers-anonymous-namespaces">Inline functions &amp; variables (C++17+); static in headers; anonymous namespaces</h3>
<ul>
  <li>What inline means in C++: ODR-ok to have identical defs in multiple TUs.</li>
  <li>When to use: functions defined in headers; header-only libs; small utilities.
An illustration:
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">explicit</span> <span class="n">ColWriter</span><span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string_view</span> <span class="n">inst_id</span><span class="p">)</span>
          <span class="o">:</span> <span class="n">outdir_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">outdir</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>this initializes <code class="language-plaintext highlighter-rouge">outdir_</code> before the ctor body. Any advantages to initilizaing beforehand?</p>

<p>Without inline, suppose we had -&gt;</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// colstore.hpp</span>
<span class="kt">void</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="k">const</span> <span class="n">fs</span><span class="o">::</span><span class="n">path</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And included this in two <code class="language-plaintext highlighter-rouge">.cpp</code> files. We will get a linker error that says something like</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>multiple definition of `ensure_dir(...)`.
</code></pre></div></div>

<ul>
  <li>Alternatives: put defs in a single .cpp; or static for TU-local copies (not one entity).</li>
  <li>Since C++17: inline variables for header globals.</li>
  <li>Gotcha: inline ≠ “hint to optimize.” It’s a linkage/ODR feature.</li>
</ul>

<h3 id="templates-where-to-put-definitions-explicit-instantiation-to-shrink-abi">Templates: where to put definitions; explicit instantiation to shrink ABI</h3>

<h3 id="pimpl-to-stabilize-abi-and-speed-up-builds">PIMPL to stabilize ABI and speed up builds</h3>

<h2 id="error-handling--contracts">error handling &amp; contracts</h2>

<h3 id="exceptions-vs-status-codes-strongbasicnothrow-guarantees">Exceptions vs status codes; strong/basic/nothrow guarantees</h3>

<h3 id="noexcept-correctness-unwinding-costs-raii-as-the-backbone">noexcept correctness; unwinding costs; RAII as the backbone</h3>

<h3 id="assertions-preconditions-postconditions-and-expectsensures-style">Assertions, preconditions, postconditions (and [[expects]]/[[ensures]] style)</h3>

<h2 id="interfaces--ownership-apis">interfaces &amp; ownership APIs</h2>

<h3 id="function-parameters-input-string_view-span-output-stdstring-vector-return-value-in-out">Function parameters: input (string_view, span<const T="">), output (std::string&amp;, vector&amp;, return value), in-out</const></h3>

<h3 id="avoiding-allocations-at-boundaries-reserve-append-fmt-vs-ostringstream">Avoiding allocations at boundaries: reserve, append, fmt vs ostringstream</h3>

<h3 id="stdoptional-expected-if-available-and-error-transport">std::optional, expected (if available), and error transport</h3>

<h2 id="containers--iterators">containers &amp; iterators</h2>

<h3 id="choosing-the-right-container-mapunordered_mapflat_map">Choosing the right container (map/unordered_map/flat_map)</h3>

<h3 id="iterator-invalidation-rules-node-vs-contiguous-containers">Iterator invalidation rules; node vs contiguous containers</h3>

<h3 id="views-and-ranges-c20-lazy-pipelines-stdrangesviews">Views and ranges (C++20): lazy pipelines, std::ranges::views</h3>

<h2 id="strings-text-and-formatting">strings, text, and formatting</h2>

<h3 id="stdstring-vs-string_view-utf-8-realities-slicing--lifetime">std::string vs string_view; UTF-8 realities; slicing &amp; lifetime</h3>

<h3 id="formatting-stdformat-c20-compile-time-format-checks-log-sinks">Formatting: std::format (C++20), compile-time format checks; log sinks</h3>

<h2 id="filesystem--io">filesystem &amp; I/O</h2>

<h3 id="stdfilesystempath-ties-back-to-your-ctor">std::filesystem::path (ties back to your ctor)</h3>

<h3 id="buffered-vs-unbuffered-io-memory-mapped-files-sync-vs-async">Buffered vs unbuffered I/O; memory-mapped files; sync vs async</h3>

<h3 id="binary-vs-text-endian--struct-packing">Binary vs text; endian &amp; struct packing</h3>

<h2 id="concurrency--atomics">concurrency &amp; atomics</h2>

<h3 id="stdthread-executors-when-available-futures">std::thread, executors (when available), futures</h3>

<h3 id="data-races-memory-orders-relaxed-acq_rel-seq_cst">Data races, memory orders (relaxed, acq_rel, seq_cst)</h3>

<h3 id="lock-free-basics-stdatomic_ref-hazards--aba">Lock-free basics; std::atomic_ref; hazards &amp; ABA</h3>

<h2 id="templates--generic-programming">templates &amp; generic programming</h2>

<h3 id="concepts--constraints-sfinae--requires-clauses">Concepts &amp; constraints; SFINAE → requires-clauses</h3>

<h3 id="perfect-forwarding-constructors-ctad-policy-based-design">Perfect-forwarding constructors; CTAD; policy-based design</h3>

<h3 id="crtp-and-zero-overhead-abstractions">CRTP and zero-overhead abstractions</h3>

<h2 id="performance-engineering">performance engineering</h2>

<h3 id="copy-elision-small-objects-cache-friendliness">Copy elision, small objects, cache friendliness</h3>

<h3 id="avoiding-virtual-when-hot-devirtualization-final">Avoiding virtual when hot; devirtualization; final</h3>

<h3 id="measuring-not-guessing-godbolt-perf-vtune-cachegrind">Measuring, not guessing: godbolt, perf, VTune, Cachegrind</h3>

<h2 id="tooling--hygiene">tooling &amp; hygiene</h2>

<h3 id="warnings-as-errors-sanitizers-static-analyzers">Warnings as errors; sanitizers; static analyzers</h3>

<h3 id="cmake-idioms-modules-when-practical">CMake idioms; modules (when practical)</h3>

<h3 id="coding-guidelines-es20-nl26-r11-gotwcppcoreguidelines">Coding guidelines: ES.20, NL.26, R.11 (GotW/CppCoreGuidelines)</h3>]]></content><author><name></name></author><category term="notes" /><category term="cpp" /></entry><entry><title type="html">C++ Object Model &amp;amp; RAII (Ownership, Lifetime, Memory)</title><link href="https://p-dhanush.github.io/notes/2025/10/15/object-model-raii.html" rel="alternate" type="text/html" title="C++ Object Model &amp;amp; RAII (Ownership, Lifetime, Memory)" /><published>2025-10-15T10:30:00+05:30</published><updated>2025-10-15T10:30:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/15/object-model-raii</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/15/object-model-raii.html"><![CDATA[<p>#</p>

<ul id="markdown-toc">
  <li><a href="#1-types--layout" id="markdown-toc-1-types--layout">1. Types &amp; Layout</a>    <ul>
      <li><a href="#11-classes--structs" id="markdown-toc-11-classes--structs">1.1 Classes &amp; Structs</a></li>
      <li><a href="#12-data-members-access-control-standard-layout-vs-trivial" id="markdown-toc-12-data-members-access-control-standard-layout-vs-trivial">1.2 Data members, access-control, standard layout vs trivial</a></li>
      <li><a href="#12-data-members-access-control-standard-layout-vs-trivial-1" id="markdown-toc-12-data-members-access-control-standard-layout-vs-trivial-1">1.2 Data Members, Access Control, Standard-Layout vs Trivial</a>        <ul>
          <li><a href="#access-control-publicprotectedprivate" id="markdown-toc-access-control-publicprotectedprivate">Access Control (public/protected/private)</a></li>
        </ul>
      </li>
      <li><a href="#13-static-members-type-level-vs-non-static-object-level" id="markdown-toc-13-static-members-type-level-vs-non-static-object-level">1.3 <code class="language-plaintext highlighter-rouge">static</code> members (type-level) vs non-static (object-level)</a></li>
    </ul>
  </li>
  <li><a href="#2-object-model" id="markdown-toc-2-object-model">2. Object Model</a></li>
  <li><a href="#3-construction--destruction-raii-core" id="markdown-toc-3-construction--destruction-raii-core">3. Construction &amp; Destruction (RAII Core)</a></li>
  <li><a href="#4-initialization-patterns" id="markdown-toc-4-initialization-patterns">4. Initialization patterns</a></li>
  <li><a href="#5-ownership-buffers" id="markdown-toc-5-ownership-buffers">5. Ownership buffers</a></li>
  <li><a href="#6-resource-management-raii-in-practice" id="markdown-toc-6-resource-management-raii-in-practice">6. Resource Management (RAII in practice)</a></li>
  <li><a href="#7-storage-duration--lifetime-pitfalls" id="markdown-toc-7-storage-duration--lifetime-pitfalls">7. Storage duration &amp; Lifetime pitfalls</a></li>
</ul>

<hr />

<h2 id="1-types--layout">1. Types &amp; Layout</h2>
<h3 id="11-classes--structs">1.1 Classes &amp; Structs</h3>
<p><em>What is a type (in this context)?</em>
A type describes a set of values and the operations valid on them. For user-defined types (classes/structs), it also fixes a memory layout for each object: the order, alignment, and presence of data members, plus what functions can act on those objects.</p>

<p><em>Classes vs Structs (quick)</em>
Refer classes here, and structs here.</p>

<p>Same thing in C++—the only difference is default access:
struct: members are public by default
class: members are private by default</p>

<p><em>Objects &amp; Identity</em>
An object is a concrete instance of a type, stored somewhere (stack/heap/static). Each object gets its own storage for non-static (will discuss soon) data members, so different objects can hold different values.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p><strong>The <code class="language-plaintext highlighter-rouge">this</code> pointer (how member functions know “which one?”)</strong>
Non-static member functions receive a hidden first parameter: <code class="language-plaintext highlighter-rouge">this</code>, a pointer to the specific object being used. This help in ‘pointing’ to and identifying that particular instance of a type. So:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">C</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  
  <span class="c1">// 1) member: operates on *this* object</span>
  <span class="kt">void</span> <span class="n">bump</span><span class="p">(</span><span class="kt">int</span> <span class="n">by</span><span class="p">)</span> <span class="p">{</span>          <span class="c1">// implicit C* this</span>
    <span class="n">value</span> <span class="o">+=</span> <span class="n">by</span><span class="p">;</span>               <span class="c1">// means this-&gt;value += by;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="n">C</span> <span class="n">a</span><span class="p">;</span>
<span class="n">a</span><span class="p">.</span><span class="n">bump</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>          <span class="c1">// a's value in particular increases by 3 from 0 to 3.</span>
</code></pre></div></div>
<p>Mental equivalent of what’s going on with <code class="language-plaintext highlighter-rouge">this</code> working implicitly -&gt;</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Conceptual Translation</span>
<span class="kt">void</span> <span class="nf">bump</span><span class="p">(</span><span class="n">C</span><span class="o">*</span> <span class="n">this_</span><span class="p">,</span> <span class="kt">int</span> <span class="n">by</span><span class="p">)</span> <span class="p">{</span> <span class="n">this_</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">+=</span> <span class="n">by</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// implicitly pointing to a location for 'a' in particular.</span>
</code></pre></div></div>
<p><strong>Static vs non-static members (preview)</strong></p>
<ul>
  <li>Non-static data: per-object storage (affects sizeof(C)), accessed via this.</li>
  <li>Static data: one per type (does not affect sizeof(C)), lives in static storage.</li>
  <li>Static functions: belong to the type, have no this, great for factories/utilities.</li>
</ul>

<h3 id="12-data-members-access-control-standard-layout-vs-trivial">1.2 Data members, access-control, standard layout vs trivial</h3>
<p>Access control</p>
<ul>
  <li>public → visible to everyone</li>
  <li>protected → visible to derived classes</li>
  <li>private → internal to the type
Use access to enforce invariants (e.g., keep representation valid).</li>
</ul>

<h3 id="12-data-members-access-control-standard-layout-vs-trivial-1">1.2 Data Members, Access Control, Standard-Layout vs Trivial</h3>

<p><strong>What this section covers:</strong> where member data lives, who can see it, how layout is formed in memory, and what “standard-layout” and “trivial” actually mean (modern replacement for the old “POD” idea).</p>

<hr />

<h4 id="access-control-publicprotectedprivate">Access Control (public/protected/private)</h4>

<p>Use access to enforce invariants and express intent.</p>

<p>```cpp
struct BankAccount {
private:
  double balance_ = 0.0;        // hidden; callers can’t break invariants directly
public:
  void deposit(double x) { if (x &gt;= 0) balance_ += x; }
  double balance() const { return balance_; }
protected:
  void audit_adjust(double x) { balance_ += x; } // accessible to derived types
};</p>

<h3 id="13-static-members-type-level-vs-non-static-object-level">1.3 <code class="language-plaintext highlighter-rouge">static</code> members (type-level) vs non-static (object-level)</h3>

<h2 id="2-object-model">2. Object Model</h2>

<h2 id="3-construction--destruction-raii-core">3. Construction &amp; Destruction (RAII Core)</h2>

<h2 id="4-initialization-patterns">4. Initialization patterns</h2>

<h2 id="5-ownership-buffers">5. Ownership buffers</h2>

<h2 id="6-resource-management-raii-in-practice">6. Resource Management (RAII in practice)</h2>

<h2 id="7-storage-duration--lifetime-pitfalls">7. Storage duration &amp; Lifetime pitfalls</h2>]]></content><author><name></name></author><category term="notes" /><category term="cpp" /></entry><entry><title type="html">WSL Cheatsheet</title><link href="https://p-dhanush.github.io/notes/2025/10/15/WSLCheatsheet.html" rel="alternate" type="text/html" title="WSL Cheatsheet" /><published>2025-10-15T10:30:00+05:30</published><updated>2025-10-15T10:30:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/15/WSLCheatsheet</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/15/WSLCheatsheet.html"><![CDATA[<h1 id="wsl-cheatsheet--from-first-principles-to-power-user">WSL Cheatsheet — From First Principles to Power User</h1>

<ul id="markdown-toc">
  <li><a href="#wsl-cheatsheet--from-first-principles-to-power-user" id="markdown-toc-wsl-cheatsheet--from-first-principles-to-power-user">WSL Cheatsheet — From First Principles to Power User</a>    <ul>
      <li><a href="#1-first-principles" id="markdown-toc-1-first-principles">1. First Principles</a>        <ul>
          <li><a href="#11-os-kernel-userspace" id="markdown-toc-11-os-kernel-userspace">1.1 OS, Kernel, Userspace</a></li>
          <li><a href="#12-where-wsl-fits" id="markdown-toc-12-where-wsl-fits">1.2 Where WSL fits</a></li>
          <li><a href="#13-wsl1-vs-wsl2-quick-compare" id="markdown-toc-13-wsl1-vs-wsl2-quick-compare">1.3 WSL1 vs WSL2 (quick compare)</a></li>
        </ul>
      </li>
      <li><a href="#2-shells--environments" id="markdown-toc-2-shells--environments">2. Shells &amp; Environments</a>        <ul>
          <li><a href="#21-bash-linux-vs-powershell-windows" id="markdown-toc-21-bash-linux-vs-powershell-windows">2.1 Bash (Linux) vs PowerShell (Windows)</a></li>
          <li><a href="#22-profiles" id="markdown-toc-22-profiles">2.2 Profiles</a></li>
          <li><a href="#23-environment-variables" id="markdown-toc-23-environment-variables">2.3 Environment Variables</a></li>
        </ul>
      </li>
      <li><a href="#3-filesystems--paths" id="markdown-toc-3-filesystems--paths">3. Filesystems &amp; Paths</a>        <ul>
          <li><a href="#31-where-things-live" id="markdown-toc-31-where-things-live">3.1 Where things live</a>            <ul>
              <li><a href="#the-short-map-of-paths" id="markdown-toc-the-short-map-of-paths">The short map of paths</a></li>
              <li><a href="#how-to-see-where-we-are-and-what-its-mounted-on" id="markdown-toc-how-to-see-where-we-are-and-what-its-mounted-on">How to see where we are and what it’s mounted on</a></li>
              <li><a href="#shifting-from-mnt-to-using-code-id-used-previously--" id="markdown-toc-shifting-from-mnt-to-using-code-id-used-previously--">Shifting from <code class="language-plaintext highlighter-rouge">/mnt/</code> to <code class="language-plaintext highlighter-rouge">~</code>(using code I’d used previously) -&gt;</a></li>
            </ul>
          </li>
          <li><a href="#32-performance--file-watching" id="markdown-toc-32-performance--file-watching">3.2 Performance &amp; file-watching</a></li>
        </ul>
      </li>
      <li><a href="#4-processes-networks-interop" id="markdown-toc-4-processes-networks-interop">4. Processes, Networks, Interop</a>        <ul>
          <li><a href="#41-run-windows-apps-from-wsl-and-vice-versa" id="markdown-toc-41-run-windows-apps-from-wsl-and-vice-versa">4.1 Run Windows apps from WSL and vice versa</a></li>
          <li><a href="#42-networking-basics" id="markdown-toc-42-networking-basics">4.2 Networking Basics</a></li>
        </ul>
      </li>
      <li><a href="#5-package-managers--toolchains" id="markdown-toc-5-package-managers--toolchains">5. Package Managers &amp; Toolchains</a>        <ul>
          <li><a href="#51-apt-vs-wingetchoco" id="markdown-toc-51-apt-vs-wingetchoco">5.1 apt vs winget/choco</a></li>
          <li><a href="#52-common-stacks-quick-installs" id="markdown-toc-52-common-stacks-quick-installs">5.2 Common stacks (quick installs)</a></li>
        </ul>
      </li>
      <li><a href="#6-git--projects" id="markdown-toc-6-git--projects">6. Git &amp; Projects</a>        <ul>
          <li><a href="#61-where-to-clone" id="markdown-toc-61-where-to-clone">6.1 Where to clone</a></li>
          <li><a href="#62-useful-git-setup" id="markdown-toc-62-useful-git-setup">6.2 Useful Git setup</a></li>
        </ul>
      </li>
      <li><a href="#7-troubleshooting" id="markdown-toc-7-troubleshooting">7. Troubleshooting</a></li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="1-first-principles">1. First Principles</h2>

<h3 id="11-os-kernel-userspace">1.1 OS, Kernel, Userspace</h3>
<ul>
  <li><strong>Kernel</strong>: hardware, processes, memory, filesystems, networking.</li>
  <li><strong>Userspace</strong>: shells (Bash/PowerShell), tools, libraries, apps.</li>
  <li><strong>Windows vs Linux</strong>: different kernels → different syscalls &amp; tools.</li>
</ul>

<h3 id="12-where-wsl-fits">1.2 Where WSL fits</h3>
<ul>
  <li><strong>WSL</strong> lets you run a <strong>Linux userspace</strong> on Windows.</li>
  <li><strong>WSL1</strong>: translates Linux syscalls to Windows kernel calls.</li>
  <li><strong>WSL2</strong>: runs a <strong>real Linux kernel</strong> in a lightweight VM (higher compatibility/perf).</li>
</ul>

<h3 id="13-wsl1-vs-wsl2-quick-compare">1.3 WSL1 vs WSL2 (quick compare)</h3>

<table>
  <thead>
    <tr>
      <th>Aspect</th>
      <th>WSL1</th>
      <th>WSL2 (recommended)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Kernel</td>
      <td>Translation layer</td>
      <td>Real Linux kernel (managed VM)</td>
    </tr>
    <tr>
      <td>FS perf in <code class="language-plaintext highlighter-rouge">~/</code></td>
      <td>N/A</td>
      <td><strong>Fast</strong></td>
    </tr>
    <tr>
      <td>FS perf in <code class="language-plaintext highlighter-rouge">/mnt/*</code></td>
      <td>Generally OK</td>
      <td><strong>Slower</strong>; use for access, not hot dev</td>
    </tr>
    <tr>
      <td>File watching</td>
      <td>Bridged</td>
      <td>Native in <code class="language-plaintext highlighter-rouge">~/</code>; <strong>flaky on <code class="language-plaintext highlighter-rouge">/mnt/*</code></strong></td>
    </tr>
    <tr>
      <td>Networking</td>
      <td>Shares host IP</td>
      <td>NAT/virtualized (different IP)</td>
    </tr>
    <tr>
      <td>Compatibility</td>
      <td>Good</td>
      <td><strong>Very high</strong></td>
    </tr>
  </tbody>
</table>

<p><strong>Rule of thumb:</strong> keep repos in <strong><code class="language-plaintext highlighter-rouge">~/</code></strong>; use <code class="language-plaintext highlighter-rouge">/mnt/c|d|e</code> only to <em>access</em> Windows files.</p>

<hr />

<h2 id="2-shells--environments">2. Shells &amp; Environments</h2>

<h3 id="21-bash-linux-vs-powershell-windows">2.1 Bash (Linux) vs PowerShell (Windows)</h3>

<table>
  <thead>
    <tr>
      <th>Topic</th>
      <th>Bash</th>
      <th>PowerShell</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Prompt</td>
      <td><code class="language-plaintext highlighter-rouge">$</code></td>
      <td><code class="language-plaintext highlighter-rouge">PS C:\&gt;</code></td>
    </tr>
    <tr>
      <td>Scripting</td>
      <td><code class="language-plaintext highlighter-rouge">#!/usr/bin/env bash</code></td>
      <td><code class="language-plaintext highlighter-rouge">.ps1</code> (PowerShell syntax)</td>
    </tr>
    <tr>
      <td>Set env var</td>
      <td><code class="language-plaintext highlighter-rouge">FOO=bar cmd</code> or <code class="language-plaintext highlighter-rouge">export FOO=bar</code></td>
      <td><code class="language-plaintext highlighter-rouge">$env:FOO='bar'; cmd</code></td>
    </tr>
    <tr>
      <td>Paths</td>
      <td><code class="language-plaintext highlighter-rouge">/home/user</code></td>
      <td><code class="language-plaintext highlighter-rouge">C:\Users\User</code></td>
    </tr>
    <tr>
      <td>Pipe model</td>
      <td>Text streams</td>
      <td>.NET objects</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Use <strong>Bash in WSL</strong> for Linux tools; <strong>PowerShell</strong> for Windows automation.</p>
</blockquote>

<h3 id="22-profiles">2.2 Profiles</h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">~/.bashrc</code></strong> (WSL/Bash): runs on interactive shells. Put aliases/exports here.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">~/.profile</code></strong>: login shell config (runs once per login).</li>
  <li><strong>PowerShell profile</strong>: <code class="language-plaintext highlighter-rouge">echo $PROFILE</code> shows the path; put functions/aliases there.</li>
</ul>

<p><strong>Common Bash additions:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ~/.bashrc</span>
<span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gems"</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gems/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'ls -lah'</span>
<span class="nb">alias </span><span class="nv">gs</span><span class="o">=</span><span class="s1">'git status -sb'</span>
<span class="nb">alias </span><span class="nv">gp</span><span class="o">=</span><span class="s1">'git pull --rebase'</span>
<span class="nb">alias </span><span class="nv">jserve</span><span class="o">=</span><span class="s1">'bundle exec jekyll serve --livereload --drafts --future --force_polling'</span>
</code></pre></div></div>

<h3 id="23-environment-variables">2.3 Environment Variables</h3>
<ul>
  <li>Temporary (one command): <code class="language-plaintext highlighter-rouge">FOO=1 cmd</code></li>
  <li>Session-wide: <code class="language-plaintext highlighter-rouge">export FOO=1</code></li>
  <li>Persistent: put in <code class="language-plaintext highlighter-rouge">~/.bashrc</code> then <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code></li>
</ul>

<h2 id="3-filesystems--paths">3. Filesystems &amp; Paths</h2>

<h3 id="31-where-things-live">3.1 Where things live</h3>

<p>On a real Linux machine, the root of OS <code class="language-plaintext highlighter-rouge">/</code> is on a Linux-formatted filesystem, (ext4, xfs, btrfs, etc.) sitting on a disk/partition and the home directory is typically on:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/&lt;linux-user&gt;     <span class="c"># shorthand: ~/</span>
</code></pre></div></div>

<p>In WSL2, we run a real linux kernel inside a lighweight virtual machine. All ilnux files including <code class="language-plaintext highlighter-rouge">/home/&lt;linux-user&gt;</code> resides on a virtual disk on windows. The location is generally on a ext4.vhdx at:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\&lt;</span>WindowsUser&gt;<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>ackages<span class="se">\&lt;</span>YourDistroPackage&gt;<span class="se">\L</span>ocalState<span class="se">\e</span>xt4.vhdx
</code></pre></div></div>
<ul>
  <li><strong>But don’t access or change this file directly!</strong></li>
  <li>When we browse <code class="language-plaintext highlighter-rouge">\wsl$\Ubuntu\home\&lt;user&gt;\</code> from Windows explorer, we are looking inside that VHDX.</li>
  <li>Because <code class="language-plaintext highlighter-rouge">/home/&lt;user&gt;</code> is inside the VHDX, it’s fast and emits reliable file-change events (ideal for dev loops).</li>
</ul>

<p>Windows drives are mounted into Linux under <code class="language-plaintext highlighter-rouge">/mnt</code> using a special filesystem driver called <em>DrvFs</em>.
Think of this as a bridge that lets Linux processes read/write Windows files. It’s super convenient, but:</p>
<ul>
  <li>It emulates Linux-style permissions over NTFS</li>
  <li>It bridges file-change notifications (sometimes misses events),</li>
  <li>It’s generally slower for workloads with many small files.</li>
</ul>

<p>That’s why tools like Jekyll/NPM/Webpack work best from ~/ (inside the VHDX), and need –force_polling if you we develop under /mnt/*.</p>

<ul>
  <li><strong>Linux Home:</strong>  <code class="language-plaintext highlighter-rouge">~/</code> = <code class="language-plaintext highlighter-rouge">/home/&lt;user&gt;</code> -&gt; best place for code?</li>
  <li><strong>Windows drives under WSL:</strong> <code class="language-plaintext highlighter-rouge">/mnt/c</code>, <code class="language-plaintext highlighter-rouge">/mnt/d</code>, -&gt; convenient access, slower for dev loops</li>
</ul>

<h4 id="the-short-map-of-paths">The short map of paths</h4>

<table>
  <thead>
    <tr>
      <th>Concept</th>
      <th>WSL (Ubuntu) path</th>
      <th>What it is</th>
      <th>Windows-visible path</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Linux home</strong> (your files, configs)</td>
      <td><code class="language-plaintext highlighter-rouge">/home/&lt;your-linux-user&gt;</code><br /><code class="language-plaintext highlighter-rouge">~</code> (shorthand)</td>
      <td>Native <strong>Linux filesystem</strong> managed by WSL.<br />Fast I/O, reliable file-watch.</td>
      <td><code class="language-plaintext highlighter-rouge">\\wsl$\Ubuntu\home\&lt;your-linux-user&gt;\</code><br />(open in Explorer)</td>
    </tr>
    <tr>
      <td><strong>Windows user home</strong></td>
      <td><code class="language-plaintext highlighter-rouge">/mnt/c/Users/&lt;YourWindowsName&gt;</code></td>
      <td>Your Windows profile, seen from <strong>WSL</strong> via the <code class="language-plaintext highlighter-rouge">/mnt/*</code> bridge.</td>
      <td><code class="language-plaintext highlighter-rouge">C:\Users\&lt;YourWindowsName&gt;</code></td>
    </tr>
    <tr>
      <td><strong>Windows drives</strong></td>
      <td><code class="language-plaintext highlighter-rouge">/mnt/c/</code>, <code class="language-plaintext highlighter-rouge">/mnt/d/</code>, <code class="language-plaintext highlighter-rouge">/mnt/e/</code></td>
      <td>Automatic mounts of Windows drives <strong>inside WSL</strong>.<br />Convenient access, but slower for dev &amp; flaky file-watch.</td>
      <td><code class="language-plaintext highlighter-rouge">C:\</code>, <code class="language-plaintext highlighter-rouge">D:\</code>, <code class="language-plaintext highlighter-rouge">E:\</code></td>
    </tr>
  </tbody>
</table>

<h4 id="how-to-see-where-we-are-and-what-its-mounted-on">How to see where we are and what it’s mounted on</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">pwd</span>                 <span class="c"># current dir</span>
<span class="nb">df</span> <span class="nt">-h</span> ~             <span class="c"># free/used space of your Linux home filesystem</span>
findmnt ~           <span class="c"># shows the mount &amp; filesystem backing your home</span>

<span class="c">###### RESULT -&gt;</span>
prida01@DhanushPC:/mnt/e/MyBlog<span class="nv">$ </span><span class="nb">pwd</span>
/mnt/e/MyBlog
prida01@DhanushPC:/mnt/e/MyBlog<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$HOME</span>
/home/prida01
prida01@DhanushPC:/mnt/e/MyBlog<span class="nv">$ </span><span class="nb">df</span> <span class="nt">-h</span>
Filesystem      Size  Used Avail Use% Mounted on
none            3.9G     0  3.9G   0% /usr/lib/modules/6.6.87.2-microsoft-standard-WSL2
none            3.9G  4.0K  3.9G   1% /mnt/wsl
drivers         364G  304G   61G  84% /usr/lib/wsl/drivers
/dev/sdd        251G  2.8G  236G   2% /
none            3.9G  488K  3.9G   1% /mnt/wslg
none            3.9G     0  3.9G   0% /usr/lib/wsl/lib
rootfs          3.9G  2.7M  3.9G   1% /init
none            3.9G  4.0K  3.9G   1% /run
none            3.9G     0  3.9G   0% /run/lock
none            3.9G     0  3.9G   0% /run/shm
none            3.9G     0  3.9G   0% /run/user
none            3.9G   76K  3.9G   1% /mnt/wslg/versions.txt
none            3.9G   76K  3.9G   1% /mnt/wslg/doc
C:<span class="se">\ </span>            364G  304G   61G  84% /mnt/c
D:<span class="se">\ </span>            293G   90G  204G  31% /mnt/d
E:<span class="se">\ </span>            262G   19G  244G   8% /mnt/e
</code></pre></div></div>

<p>Convert paths:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bash</span>
wslpath <span class="s1">'E:\MyBlog\GITBLOG'</span>      <span class="c"># -&gt; /mnt/e/MyBlog/GITBLOG</span>
</code></pre></div></div>

<h4 id="shifting-from-mnt-to-using-code-id-used-previously--">Shifting from <code class="language-plaintext highlighter-rouge">/mnt/</code> to <code class="language-plaintext highlighter-rouge">~</code>(using code I’d used previously) -&gt;</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/code
rsync <span class="nt">-a</span> <span class="nt">--info</span><span class="o">=</span>progress2 /mnt/e/MyBlog/GITBLOG/P-Dhanush.github.io/ ~/code/P-Dhanush.github.io/
<span class="nb">cd</span> ~/code/P-Dhanush.github.io
bundle <span class="nb">install
</span>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--livereload</span> <span class="nt">--drafts</span> <span class="nt">--future</span>   <span class="c"># I was able to proceed without --force_polling</span>
</code></pre></div></div>

<h3 id="32-performance--file-watching">3.2 Performance &amp; file-watching</h3>

<ul>
  <li>Hot-reload tools (Jekyll/Webpack/nodemon) watch files.</li>
  <li>In <code class="language-plaintext highlighter-rouge">~/</code>: events are reliable.</li>
  <li>In <code class="language-plaintext highlighter-rouge">/mnt/*</code>: events can be missed → use polling flags (e.g., <code class="language-plaintext highlighter-rouge">--force_polling</code>) or move repo to <code class="language-plaintext highlighter-rouge">~/</code>.</li>
</ul>

<h2 id="4-processes-networks-interop">4. Processes, Networks, Interop</h2>

<h3 id="41-run-windows-apps-from-wsl-and-vice-versa">4.1 Run Windows apps from WSL and vice versa</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># From WSL:</span>
explorer.exe <span class="nb">.</span>          <span class="c"># open current folder in Windows Explorer</span>
notepad.exe README.md   <span class="c"># open file in Notepad</span>
powershell.exe <span class="nt">-Command</span> <span class="s2">"Get-Process"</span>   <span class="c"># run a PowerShell command</span>

<span class="c"># From Windows PowerShell to WSL:</span>
wsl <span class="nb">ls</span> <span class="nt">-la</span>
wsl <span class="nt">-e</span> bash <span class="nt">-lc</span> <span class="s2">"echo hello from linux"</span>
</code></pre></div></div>

<h3 id="42-networking-basics">4.2 Networking Basics</h3>
<ul>
  <li>WSL2 uses NAT; it has its own IP.</li>
  <li>Access Windows services from WSL via <code class="language-plaintext highlighter-rouge">localhost</code> (mirrored by WSL).</li>
  <li>Access WSL services from Windows usually via <code class="language-plaintext highlighter-rouge">localhost:PORT</code> (modern WSL enables this by default). If not, check firewall.</li>
</ul>

<h2 id="5-package-managers--toolchains">5. Package Managers &amp; Toolchains</h2>
<h3 id="51-apt-vs-wingetchoco">5.1 apt vs winget/choco</h3>

<p>Inside WSL: use <code class="language-plaintext highlighter-rouge">apt</code> for Linux packages.
Windows side: <code class="language-plaintext highlighter-rouge">winget</code> or <code class="language-plaintext highlighter-rouge">choco</code> for Windows apps.</p>

<h3 id="52-common-stacks-quick-installs">5.2 Common stacks (quick installs)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Compilers / build tools</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> build-essential git curl

<span class="c"># Python (example)</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> python3 python3-venv python3-pip

<span class="c"># Node via nvm</span>
curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
<span class="nb">source</span> ~/.bashrc
nvm <span class="nb">install</span> <span class="nt">--lts</span>

<span class="c"># Ruby/Jekyll</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> ruby-full zlib1g-dev
gem <span class="nb">install </span>bundler
</code></pre></div></div>

<h2 id="6-git--projects">6. Git &amp; Projects</h2>
<h3 id="61-where-to-clone">6.1 Where to clone</h3>

<p>Prefer: <code class="language-plaintext highlighter-rouge">~/code/&lt;project&gt;</code> (fast, reliable).
Avoid for hot dev: <code class="language-plaintext highlighter-rouge">/mnt/c/...</code> (OK for occasional access/copies).</p>

<h3 id="62-useful-git-setup">6.2 Useful Git setup</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name  <span class="s2">"Your Name"</span>
git config <span class="nt">--global</span> user.email you@example.com
git config <span class="nt">--global</span> init.defaultBranch main
git config <span class="nt">--global</span> core.autocrlf input
git fetch <span class="nt">--all</span> <span class="nt">--prune</span>
</code></pre></div></div>

<p>Daily flows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull <span class="nt">--rebase</span>
git stash push <span class="nt">-u</span> <span class="nt">-m</span> <span class="s2">"WIP"</span> <span class="o">&amp;&amp;</span> git stash pop
git log <span class="nt">--oneline</span> <span class="nt">-n</span> 5
</code></pre></div></div>

<h2 id="7-troubleshooting">7. Troubleshooting</h2>]]></content><author><name></name></author><category term="notes" /><category term="wsl" /><category term="linux" /><category term="windows" /><category term="bash" /><category term="powershell" /><category term="dev-setup" /><category term="jekyll" /><summary type="html"><![CDATA[A practical, extensible guide to WSL: fundamentals, Bash vs PowerShell, filesystems, networking, performance, daily recipes, and troubleshooting.]]></summary></entry><entry><title type="html">Column Store (SoA)</title><link href="https://p-dhanush.github.io/notes/2025/10/15/Column-Store-(SoA).html" rel="alternate" type="text/html" title="Column Store (SoA)" /><published>2025-10-15T00:00:00+05:30</published><updated>2025-10-15T00:00:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/15/Column%20Store%20(SoA)</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/15/Column-Store-(SoA).html"><![CDATA[<hr />

<h1 id="crypto-l2-analysis-part-1---column-store-architecture">Crypto L2 Analysis: Part 1 - Column Store Architecture</h1>

<ul id="markdown-toc">
  <li><a href="#crypto-l2-analysis-part-1---column-store-architecture" id="markdown-toc-crypto-l2-analysis-part-1---column-store-architecture">Crypto L2 Analysis: Part 1 - Column Store Architecture</a>    <ul>
      <li><a href="#workflow" id="markdown-toc-workflow">Workflow</a>        <ul>
          <li><a href="#directory-structure" id="markdown-toc-directory-structure">Directory Structure</a></li>
          <li><a href="#strategy" id="markdown-toc-strategy">Strategy</a>            <ul>
              <li><a href="#obtaining-the-parameters-involved-read-stage" id="markdown-toc-obtaining-the-parameters-involved-read-stage">Obtaining the parameters involved. (Read Stage)</a></li>
              <li><a href="#writing-out-the-parameters-per-our-structure" id="markdown-toc-writing-out-the-parameters-per-our-structure">Writing out the parameters per our structure.</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#the-actual-code-used-in-each-file" id="markdown-toc-the-actual-code-used-in-each-file">The actual code used in each file:</a>        <ul>
          <li><a href="#colstorehpp" id="markdown-toc-colstorehpp">colstore.hpp</a></li>
          <li><a href="#ndjson_okxhpp" id="markdown-toc-ndjson_okxhpp">ndjson_okx.hpp</a></li>
          <li><a href="#okx_to_colstorecpp" id="markdown-toc-okx_to_colstorecpp">okx_to_colstore.cpp</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="workflow">Workflow</h2>

<p>Taking OKX L2 Data for BTC - USDT in an NDJSON format, we convert the file types for faster parsing. Since this is market by price and not market by order, we have some limitations with what we can do with the data.</p>

<p><strong>You can access the data <a href="https://www.okx.com/en-us/historical-data">here</a></strong>
Take Order Book, spot data of depth 400. Any one day’s data would suffice for exploration.</p>

<p>To begin with we have two types of actions:</p>
<ul>
  <li>snapshot
<code class="language-plaintext highlighter-rouge">{"instId":"BTC-USDT","action":"snapshot","ts":"1758326400005","asks":[["115630.1","0.0145523","1"],["115631.0","0.0539","1"]...],"bids:[[px,qty,cnt],...[px,qty,cnt]]}</code></li>
  <li>update
<code class="language-plaintext highlighter-rouge">{"instId":"BTC-USDT","action":"update","ts":"1758326400015","asks":[["115717.8","0.18242079","6"]],"bids":[]}</code></li>
</ul>

<p>For this stage of our implementation we focussing on converting the data into this structure:-</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="c1">// A minimal, append-only columnar store with separate binary files per column.</span>
    <span class="c1">// Layout:</span>
    <span class="c1">//   outdir/</span>
    <span class="c1">//     schema.json              (human readable schema)</span>
    <span class="c1">//     columns/</span>
    <span class="c1">//       frame.u64</span>
    <span class="c1">//       ts_ms.u64                 (uint64 little-endian, ms since epoch)</span>
    <span class="c1">//       side.u8                (0 = bid, 1 = ask)</span>
    <span class="c1">//       etype.u8               (0 = SNAP, 1 = add, 2 = modify,3 = del, 4 = clear_bids, 5 = clear_asks)</span>
    <span class="c1">//       level.u16              (0..N-1 within that frame)</span>
    <span class="c1">//       px.f64                 (double price)</span>
    <span class="c1">//       qty.f64                (double size, amt. actually held)</span>
    <span class="c1">//       count.u32              (count, number of orders)</span>
    <span class="c1">//       inst_id.txt            (one line: instrument name)</span>
    <span class="c1">//     footer.json              ({"rows": &lt;N&gt;})</span>
    <span class="c1">// All files are append-only; caller is responsible for writing a consistent number of rows across columns.</span>
</code></pre></div></div>

<h3 id="directory-structure">Directory Structure</h3>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">include</span> <span class="nt">-</span>
<span class="o">|</span>
<span class="o">|</span><span class="nt">__mercury</span> <span class="o">//</span> <span class="o">(</span><span class="nt">I</span> <span class="nt">named</span> <span class="nt">my</span> <span class="nt">project</span> <span class="nt">mercury</span><span class="o">)</span>
<span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span><span class="nt">__colstore</span><span class="nc">.hpp</span>
<span class="o">|</span> <span class="o">|</span><span class="nt">__ndjson_okx</span><span class="nc">.hpp</span>
<span class="o">|</span>
<span class="o">|</span><span class="nt">__src</span>
<span class="o">|</span> <span class="o">|</span><span class="nt">__colstore_inspect</span><span class="nc">.cpp</span>
<span class="o">|</span> <span class="o">|</span><span class="nt">__okx_to_colstore</span><span class="nc">.cpp</span>
</code></pre></div></div>

<h3 id="strategy">Strategy</h3>

<h4 id="obtaining-the-parameters-involved-read-stage">Obtaining the parameters involved. (Read Stage)</h4>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">----------------------</span>
       <span class="o">|</span>                      <span class="o">|</span> 
    <span class="nt">---</span><span class="o">|</span>       <span class="nt">PARSER</span>         <span class="o">|</span>
    <span class="o">|</span>  <span class="o">|</span><span class="nt">----------------------</span><span class="o">|</span>
    <span class="o">|</span>
    <span class="o">|</span>  <span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span> 
    <span class="o">|</span><span class="nt">--</span><span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span>
    <span class="o">|</span>  <span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span>
    <span class="o">|</span> 
    <span class="o">|</span>  <span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span>
    <span class="o">|</span><span class="nt">--</span><span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span>
       <span class="o">|</span><span class="nt">-</span> <span class="o">(</span><span class="nt">px</span><span class="o">,</span><span class="nt">qty</span><span class="o">,</span><span class="nt">cnt</span><span class="o">)</span> <span class="nt">tuple</span> <span class="nt">-</span><span class="o">&gt;</span> <span class="o">[</span><span class="nt">Obtain</span> <span class="nt">Parameters</span> <span class="nt">via</span> <span class="nt">Parser</span> <span class="nt">function</span><span class="o">]</span>
</code></pre></div></div>

<p><strong>To keep in mind the possibility of a dynamic use-case of the parameters we obtain, we dont hardcode what we do with the obtained parameters in the PARSER function itself. Instead we send a <code class="language-plaintext highlighter-rouge">lambda</code> function in the PARSER function.</strong></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// The parse function structure in the header file -&gt;</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">F</span><span class="p">&gt;</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="nf">parse_okx_ndjson</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">path</span><span class="p">,</span> <span class="n">F</span> <span class="o">&amp;&amp;</span><span class="n">on_record</span><span class="p">)</span>
<span class="p">{...}</span>

<span class="c1">// The parse function we call -&gt;</span>
<span class="n">mercury</span><span class="o">::</span><span class="n">parse_okx_ndjson</span><span class="p">(</span><span class="n">in_path</span><span class="p">,</span> 
        <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">uint64_t</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">side</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">level</span><span class="p">,</span> <span class="kt">double</span> <span class="n">px</span><span class="p">,</span> <span class="kt">double</span> <span class="n">qty</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Skip empty quantities (deletes will appear as qty=0 in some datasets)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">qty</span> <span class="o">&lt;=</span> <span class="mf">0.0</span><span class="p">)</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="n">writer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="n">side</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">px</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
            <span class="o">++</span><span class="n">emitted</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">emitted</span> <span class="o">%</span> <span class="mi">1'000'000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"… "</span> <span class="o">&lt;&lt;</span> <span class="n">emitted</span> <span class="o">&lt;&lt;</span> <span class="s">" rows written</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
            <span class="p">}</span> 
        <span class="p">}</span>
        <span class="p">);</span>

        <span class="n">writer</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wrote "</span> <span class="o">&lt;&lt;</span> <span class="n">writer</span><span class="p">.</span><span class="n">rows</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" rows to "</span> <span class="o">&lt;&lt;</span> <span class="n">outdir</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="writing-out-the-parameters-per-our-structure">Writing out the parameters per our structure.</h4>

<p>The <code class="language-plaintext highlighter-rouge">writer</code> function seen above is to write the parameters we obtain down into our files.</p>

<ul>
  <li>We configure a path where we can create our output columns.</li>
  <li>Create a ColWriter class with an apt constructor to open files on initilaizing. This can bring down overhead.</li>
  <li>We then use functions to write the parameters we’ve extracted into these files. The <code class="language-plaintext highlighter-rouge">lambda</code> funciton earlier takes care of this. We simply provide an apt <code class="language-plaintext highlighter-rouge">append</code> funciton to aid this process.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Files</span><span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">ts_ms</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">side</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">level</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">px</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">qty</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">count</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
  <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">dir</span><span class="p">;</span>
  <span class="kt">uint64_t</span> <span class="n">rows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">ColWriter</span><span class="p">{</span>
  <span class="nl">public:</span>
    <span class="c1">// The constructor function will open up all the files.</span>
    <span class="k">explicit</span> <span class="n">ColWriter</span><span class="p">(</span><span class="n">filestream</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir</span><span class="p">,</span> <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">outdir_</span><span class="p">(</span><span class="n">sd</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">outdir</span><span class="p">)){</span>
      <span class="n">check_directory_present</span><span class="p">(</span><span class="n">outdir</span><span class="p">);</span> <span class="c1">// if not the func will take care of creating.</span>
      <span class="k">auto</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">outdir_</span> <span class="o">/</span> <span class="s">"columns"</span><span class="p">;</span>
      <span class="n">check_directory_present</span><span class="p">(</span><span class="n">cols</span><span class="p">);</span>

      <span class="n">files_</span><span class="p">.</span><span class="n">dir</span> <span class="o">=</span> <span class="n">outdir_</span><span class="p">;</span>
      <span class="n">files_</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"frame.u64"</span><span class="p">);</span>
      <span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"ts_ms.u64"</span><span class="p">);</span>
      <span class="n">files_</span><span class="p">.</span><span class="n">side</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"side.u8"</span><span class="p">);</span>
      <span class="c1">// You get the idea.. (open all similarly, leaving for brevity)  </span>
    <span class="p">}</span>

    <span class="o">~</span><span class="n">ColWriter</span><span class="p">{</span>
      <span class="n">close</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">ColWriter</span><span class="p">(</span><span class="k">const</span> <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
    <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">append</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">frame</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">side</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">level</span><span class="p">,</span> <span class="kt">double</span> <span class="n">px</span><span class="p">,</span> <span class="kt">double</span> <span class="n">qty</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">){</span>
      <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
      <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span><span class="p">,</span> <span class="n">ts_ms</span><span class="p">);</span>
      <span class="c1">// so on..</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">safe_close</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kt">FILE</span><span class="o">*&amp;</span> <span class="n">f</span><span class="p">){</span> <span class="c1">// A reference to the pointer. We want to set caller's pointer varaible to nullptr, so we can't let the pointer be passed by value and need actual pointer.</span>

        <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">){</span>
          <span class="n">std</span><span class="o">::</span><span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
          <span class="n">f</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">close</span><span class="p">(){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">closed_</span><span class="p">){</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">frame</span><span class="p">);</span>
      <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span><span class="p">);</span>
      <span class="c1">//so on..</span>
    <span class="p">}</span>



  <span class="nl">private:</span>
    <span class="n">filestream</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir_</span><span class="p">;</span>
    <span class="n">Files</span> <span class="n">files_</span><span class="p">{};</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-actual-code-used-in-each-file">The actual code used in each file:</h2>

<h3 id="colstorehpp">colstore.hpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef MERCURY_COLSTORE_HPP
#define MERCURY_COLSTORE_HPP
</span>
<span class="cp">#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string_view&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;filesystem&gt;</span><span class="cp">
</span><span class="k">namespace</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="p">;</span>

<span class="cp">#include</span> <span class="cpf">&lt;stdexcept&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;system_error&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
</span>
<span class="k">namespace</span> <span class="n">mercury</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="nc">ColFiles</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">ts_ms</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">side</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">level</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">px</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">qty</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">count</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">dir</span><span class="p">;</span>
        <span class="kt">uint64_t</span> <span class="n">rows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="kr">inline</span> <span class="kt">void</span> <span class="n">ensure_dir</span><span class="p">(</span><span class="k">const</span> <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">error_code</span> <span class="n">ec</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fs</span><span class="o">::</span><span class="n">exists</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">fs</span><span class="o">::</span><span class="n">create_directories</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">ec</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"Failed to create directory: "</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">string</span><span class="p">()</span> <span class="o">+</span> <span class="s">", error: "</span> <span class="o">+</span> <span class="n">ec</span><span class="p">.</span><span class="n">message</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">open_or_throw</span><span class="p">(</span><span class="k">const</span> <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">fopen</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">string</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">"wb"</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span>
            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"Failed to open for write: "</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">string</span><span class="p">());</span>
        <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">ColWriter</span>
    <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="k">explicit</span> <span class="n">ColWriter</span><span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string_view</span> <span class="n">inst_id</span><span class="p">)</span>
            <span class="o">:</span> <span class="n">outdir_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">outdir</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">inst_id</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
                <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">invalid_argument</span><span class="p">(</span><span class="s">"inst_id is empty"</span><span class="p">);</span>
            <span class="c1">// dirs</span>
            <span class="n">ensure_dir</span><span class="p">(</span><span class="n">outdir_</span><span class="p">);</span>
            <span class="k">auto</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">outdir_</span> <span class="o">/</span> <span class="s">"columns"</span><span class="p">;</span>
            <span class="n">ensure_dir</span><span class="p">(</span><span class="n">cols</span><span class="p">);</span>

            <span class="c1">// schema</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">s</span><span class="p">(</span><span class="n">outdir_</span> <span class="o">/</span> <span class="s">"schema.json"</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
                <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="s">"{"</span>
                     <span class="s">"</span><span class="se">\"</span><span class="s">version</span><span class="se">\"</span><span class="s">: 1,"</span>
                     <span class="s">"</span><span class="se">\"</span><span class="s">columns</span><span class="se">\"</span><span class="s">: ["</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">frame</span><span class="se">\"</span><span class="s">,   </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">u64</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">unit</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">integer - a count</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">ts_ms</span><span class="se">\"</span><span class="s">,   </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">u64</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">unit</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">ns</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">side</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">u8</span><span class="se">\"</span><span class="s">,  </span><span class="se">\"</span><span class="s">desc</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">0=bid,1=ask</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">level</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">u16</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">px</span><span class="se">\"</span><span class="s">,   </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">f64</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">qty</span><span class="se">\"</span><span class="s">,  </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">f64</span><span class="se">\"</span><span class="s">},"</span>
                     <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">count</span><span class="se">\"</span><span class="s">,  </span><span class="se">\"</span><span class="s">type</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">u32</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">desc</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">number of orders</span><span class="se">\"</span><span class="s">}"</span>
                     <span class="s">"]"</span>
                     <span class="s">"}"</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// inst id</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">idf</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"inst_id.txt"</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
                <span class="n">idf</span> <span class="o">&lt;&lt;</span> <span class="n">inst_id</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">files_</span><span class="p">.</span><span class="n">dir</span> <span class="o">=</span> <span class="n">outdir_</span><span class="p">;</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"frame.u64"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"ts_ms.u64"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">side</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"side.u8"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"level.u16"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">px</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"px.f64"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">qty</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"qty.f64"</span><span class="p">);</span>
            <span class="n">files_</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">open_or_throw</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="s">"count.u32"</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="o">~</span><span class="n">ColWriter</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">close</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">ColWriter</span><span class="p">(</span><span class="k">const</span> <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
        <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">ColWriter</span> <span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>

        <span class="kt">void</span> <span class="n">append</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">frame</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">side</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">level</span><span class="p">,</span> <span class="kt">double</span> <span class="n">px</span><span class="p">,</span> <span class="kt">double</span> <span class="n">qty</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span><span class="p">,</span> <span class="n">ts_ms</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">side</span><span class="p">,</span> <span class="n">side</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="n">level</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">px</span><span class="p">,</span> <span class="n">px</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">qty</span><span class="p">,</span> <span class="n">qty</span><span class="p">);</span>
            <span class="n">write_scalar</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
            <span class="o">++</span><span class="n">files_</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">void</span> <span class="n">safe_close</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*&amp;</span><span class="n">f</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
                <span class="n">f</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">void</span> <span class="n">close</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">closed_</span><span class="p">)</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">frame</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">ts_ms</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">side</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">level</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">px</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">qty</span><span class="p">);</span>
            <span class="n">safe_close</span><span class="p">(</span><span class="n">files_</span><span class="p">.</span><span class="n">count</span><span class="p">);</span>

            <span class="c1">// footer</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">f</span><span class="p">(</span><span class="n">outdir_</span> <span class="o">/</span> <span class="s">"footer.json"</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
                <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s">"{</span><span class="se">\"</span><span class="s">rows</span><span class="se">\"</span><span class="s">: "</span> <span class="o">&lt;&lt;</span> <span class="n">files_</span><span class="p">.</span><span class="n">rows</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(...)</span>
            <span class="p">{</span>
            <span class="p">}</span>

            <span class="n">closed_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">uint64_t</span> <span class="n">rows</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">files_</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="p">}</span>

    <span class="nl">private:</span>
        <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">&gt;</span>
        <span class="k">static</span> <span class="kt">void</span> <span class="n">write_scalar</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">fwrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"colstore write failed"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir_</span><span class="p">;</span>
        <span class="n">ColFiles</span> <span class="n">files_</span><span class="p">{};</span>
        <span class="kt">bool</span> <span class="n">closed_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">};</span>

<span class="cp">#ifdef _WIN32
#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#else
#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#endif
</span>
    <span class="k">struct</span> <span class="nc">MMap</span>
    <span class="p">{</span>
        <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="kt">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">static</span> <span class="n">MMap</span> <span class="n">map</span><span class="p">(</span><span class="k">const</span> <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">MMap</span> <span class="n">m</span><span class="p">;</span>
            <span class="c1">// Portable fallback: read whole file into memory (fast enough for inspection)</span>
            <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">in</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">in</span><span class="p">)</span>
                <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"open failed: "</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">string</span><span class="p">());</span>
            <span class="n">in</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">end</span><span class="p">);</span>
            <span class="n">m</span><span class="p">.</span><span class="n">len</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">in</span><span class="p">.</span><span class="n">tellg</span><span class="p">());</span>
            <span class="n">in</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="n">m</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">malloc</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">len</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
                <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">();</span>
            <span class="n">in</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">char</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">ptr</span><span class="p">),</span> <span class="n">m</span><span class="p">.</span><span class="n">len</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">void</span> <span class="n">unmap</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
                <span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
                <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">};</span>

<span class="p">}</span> <span class="c1">// namespace mercury</span>

<span class="cp">#endif // MERCURY_COLSTORE_HPP
</span></code></pre></div></div>

<h3 id="ndjson_okxhpp">ndjson_okx.hpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef MERCURY_NDJSON_OKX_HPP
#define MERCURY_NDJSON_OKX_HPP
</span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string_view&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdexcept&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;simdjson.h&gt;</span><span class="cp">
</span>
<span class="k">namespace</span> <span class="n">mercury</span>
<span class="p">{</span>

    <span class="c1">// One JSON line -&gt; many rows (one per tuple in bids/asks).</span>
    <span class="c1">// on_record signature expected: void(uint64_t ts_ms, uint8_t side, uint16_t level,</span>
    <span class="c1">///                                   double px, double qty, uint32_t count)</span>

    <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">F1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">F2</span><span class="p">&gt;</span>
    <span class="kr">inline</span> <span class="kt">void</span> <span class="n">parse_okx_ndjson</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">path</span><span class="p">,</span> <span class="n">F1</span> <span class="o">&amp;&amp;</span><span class="n">on_record</span><span class="p">,</span> <span class="n">F2</span> <span class="o">&amp;</span><span class="n">frame_id</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="o">&amp;</span><span class="n">row_limit</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="k">namespace</span> <span class="n">simdjson</span><span class="p">;</span>
        <span class="kt">bool</span> <span class="n">continue_parsing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">ondemand</span><span class="o">::</span><span class="n">parser</span> <span class="n">parser</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">doc_result</span> <span class="o">=</span> <span class="n">padded_string</span><span class="o">::</span><span class="n">load</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">doc_result</span><span class="p">.</span><span class="n">error</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"Failed to load file: "</span> <span class="o">+</span> <span class="n">path</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">padded_string</span> <span class="o">&amp;</span><span class="n">doc</span> <span class="o">=</span> <span class="n">doc_result</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>

        <span class="kt">uint64_t</span> <span class="n">emitted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">auto</span> <span class="n">stream_res</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">iterate_many</span><span class="p">(</span><span class="n">doc</span><span class="p">);</span>
        <span class="n">ondemand</span><span class="o">::</span><span class="n">document_stream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">stream_res</span><span class="p">).</span><span class="n">value</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">simdjson</span><span class="o">::</span><span class="n">ondemand</span><span class="o">::</span><span class="n">document_reference</span> <span class="n">d</span> <span class="o">:</span> <span class="n">stream</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">frame_id</span><span class="o">++</span><span class="p">;</span> <span class="c1">// &lt;- increment per JSON line</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">!=</span> <span class="n">simdjson</span><span class="o">::</span><span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">object</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="k">auto</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">get_object</span><span class="p">().</span><span class="n">value</span><span class="p">();</span>

            <span class="c1">// ts may be string or number (OKX gives ms)</span>
            <span class="kt">uint64_t</span> <span class="n">ts_ms</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">ts_it</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">find_field_unordered</span><span class="p">(</span><span class="s">"ts"</span><span class="p">);</span> <span class="n">ts_it</span><span class="p">.</span><span class="n">error</span><span class="p">()</span> <span class="o">==</span> <span class="n">SUCCESS</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">ts_it</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">string</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">get_string</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                    <span class="n">ts_ms</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint64_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">strtoull</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">ts_ms</span> <span class="o">=</span> <span class="kt">uint64_t</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">get_uint64</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">auto</span> <span class="n">maybe_stop</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">void</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">row_limit</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">emitted</span> <span class="o">&gt;=</span> <span class="n">row_limit</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="c1">// helper: emit one row per [px, qty, count?] tuple</span>
            <span class="k">auto</span> <span class="n">push_side</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">ondemand</span><span class="o">::</span><span class="n">value</span> <span class="n">arr_val</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">side</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">arr_val</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">!=</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">array</span><span class="p">)</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="n">ondemand</span><span class="o">::</span><span class="n">array</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">arr_val</span><span class="p">.</span><span class="n">get_array</span><span class="p">().</span><span class="n">value</span><span class="p">();</span>
                <span class="kt">uint16_t</span> <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">lvl_res</span> <span class="o">:</span> <span class="n">arr</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">ondemand</span><span class="o">::</span><span class="n">value</span> <span class="n">lvl_v</span> <span class="o">=</span> <span class="n">lvl_res</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">lvl_v</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">!=</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">array</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="o">++</span><span class="n">level</span><span class="p">;</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="n">ondemand</span><span class="o">::</span><span class="n">array</span> <span class="n">triple</span> <span class="o">=</span> <span class="n">lvl_v</span><span class="p">.</span><span class="n">get_array</span><span class="p">().</span><span class="n">value</span><span class="p">();</span>

                    <span class="kt">double</span> <span class="n">px</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
                    <span class="kt">double</span> <span class="n">qty</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
                    <span class="kt">uint32_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

                    <span class="kt">size_t</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">c_res</span> <span class="o">:</span> <span class="n">triple</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c_res</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">string</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_string</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                                <span class="n">px</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strtod</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">nullptr</span><span class="p">);</span>
                            <span class="p">}</span>
                            <span class="k">else</span>
                            <span class="p">{</span>
                                <span class="n">px</span> <span class="o">=</span> <span class="kt">double</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_double</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">string</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_string</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                                <span class="n">qty</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strtod</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">nullptr</span><span class="p">);</span>
                            <span class="p">}</span>
                            <span class="k">else</span>
                            <span class="p">{</span>
                                <span class="n">qty</span> <span class="o">=</span> <span class="kt">double</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_double</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="n">ondemand</span><span class="o">::</span><span class="n">json_type</span><span class="o">::</span><span class="n">string</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_string</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                                <span class="n">count</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">strtoul</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
                            <span class="p">}</span>
                            <span class="k">else</span>
                            <span class="p">{</span>
                                <span class="c1">// Some venues encode counts as integers but ondemand lets us fetch as uint64</span>
                                <span class="n">count</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">get_uint64</span><span class="p">().</span><span class="n">value</span><span class="p">());</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                        <span class="o">++</span><span class="n">idx</span><span class="p">;</span>
                    <span class="p">}</span>

                    <span class="n">on_record</span><span class="p">(</span><span class="n">ts_ms</span><span class="p">,</span> <span class="n">side</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">px</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">maybe_stop</span><span class="p">())</span>
                    <span class="p">{</span>
                        <span class="n">continue_parsing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="o">++</span><span class="n">level</span><span class="p">;</span>
                    <span class="o">++</span><span class="n">emitted</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">};</span>

            <span class="c1">// bids / b</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">find_field_unordered</span><span class="p">(</span><span class="s">"bids"</span><span class="p">);</span> <span class="n">it</span><span class="p">.</span><span class="n">error</span><span class="p">()</span> <span class="o">==</span> <span class="n">SUCCESS</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">push_side</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="cm">/*side=*/</span><span class="mi">0</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it2</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">find_field_unordered</span><span class="p">(</span><span class="s">"b"</span><span class="p">);</span> <span class="n">it2</span><span class="p">.</span><span class="n">error</span><span class="p">()</span> <span class="o">==</span> <span class="n">SUCCESS</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">push_side</span><span class="p">(</span><span class="n">it2</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="cm">/*side=*/</span><span class="mi">0</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// asks / a</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">find_field_unordered</span><span class="p">(</span><span class="s">"asks"</span><span class="p">);</span> <span class="n">it</span><span class="p">.</span><span class="n">error</span><span class="p">()</span> <span class="o">==</span> <span class="n">SUCCESS</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">push_side</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="cm">/*side=*/</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it2</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">find_field_unordered</span><span class="p">(</span><span class="s">"a"</span><span class="p">);</span> <span class="n">it2</span><span class="p">.</span><span class="n">error</span><span class="p">()</span> <span class="o">==</span> <span class="n">SUCCESS</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">push_side</span><span class="p">(</span><span class="n">it2</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="cm">/*side=*/</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">continue_parsing</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span> <span class="c1">// namespace mercury</span>

<span class="cp">#endif // MERCURY_NDJSON_OKX_HPP
</span></code></pre></div></div>

<h3 id="okx_to_colstorecpp">okx_to_colstore.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;filesystem&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string_view&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;simdjson.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"mercury/colstore.hpp"</span><span class="cp">
#include</span> <span class="cpf">"mercury/ndjson_okx.hpp"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Usage: okx_to_colstore &lt;input.data&gt; &lt;out_dir&gt; &lt;instId&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Example: okx_to_colstore BTC-USDT-L2orderbook-400lv-2025-09-20.data out/BTC-USDT BTC-USDT</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">const</span> <span class="n">string</span> <span class="n">in_path</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">const</span> <span class="n">filesystem</span><span class="o">::</span><span class="n">path</span> <span class="n">outdir</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">const</span> <span class="n">string</span> <span class="n">inst_id</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="kt">uint64_t</span> <span class="n">row_limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">row_limit</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strtoull</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">mercury</span><span class="o">::</span><span class="n">ColWriter</span> <span class="n">writer</span><span class="p">(</span><span class="n">outdir</span><span class="p">,</span> <span class="n">inst_id</span><span class="p">);</span>

        <span class="kt">size_t</span> <span class="n">emitted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">uint64_t</span> <span class="n">frame</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="n">mercury</span><span class="o">::</span><span class="n">parse_okx_ndjson</span><span class="p">(</span><span class="n">in_path</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">uint64_t</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">side</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">level</span><span class="p">,</span> <span class="kt">double</span> <span class="n">px</span><span class="p">,</span> <span class="kt">double</span> <span class="n">qty</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">)</span>
                                  <span class="p">{</span>
                                      <span class="k">if</span> <span class="p">(</span><span class="n">qty</span> <span class="o">&lt;=</span> <span class="mf">0.0</span><span class="p">)</span>
                                          <span class="k">return</span><span class="p">;</span>
                                      <span class="n">writer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">ts_ms</span><span class="p">,</span> <span class="n">side</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">px</span><span class="p">,</span> <span class="n">qty</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
                                      <span class="o">++</span><span class="n">emitted</span><span class="p">;</span>
                                      <span class="k">if</span> <span class="p">((</span><span class="n">emitted</span> <span class="o">%</span> <span class="mi">1'000'000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                                      <span class="p">{</span>
                                          <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"… "</span> <span class="o">&lt;&lt;</span> <span class="n">emitted</span> <span class="o">&lt;&lt;</span> <span class="s">" rows written</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
                                      <span class="p">}</span> <span class="p">},</span> <span class="n">frame</span><span class="p">,</span> <span class="n">row_limit</span><span class="p">);</span>

        <span class="n">writer</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wrote "</span> <span class="o">&lt;&lt;</span> <span class="n">writer</span><span class="p">.</span><span class="n">rows</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" rows to "</span> <span class="o">&lt;&lt;</span> <span class="n">outdir</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERROR: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="notes" /><category term="jekyll" /><category term="howto" /><summary type="html"><![CDATA[Crypto L2 Analysis: Part 1 - Column Store Architecture Crypto L2 Analysis: Part 1 - Column Store Architecture Workflow Directory Structure Strategy Obtaining the parameters involved. (Read Stage) Writing out the parameters per our structure. The actual code used in each file: colstore.hpp ndjson_okx.hpp okx_to_colstore.cpp Workflow Taking OKX L2 Data for BTC - USDT in an NDJSON format, we convert the file types for faster parsing. Since this is market by price and not market by order, we have some limitations with what we can do with the data. You can access the data here Take Order Book, spot data of depth 400. Any one day’s data would suffice for exploration. To begin with we have two types of actions: snapshot {"instId":"BTC-USDT","action":"snapshot","ts":"1758326400005","asks":[["115630.1","0.0145523","1"],["115631.0","0.0539","1"]...],"bids:[[px,qty,cnt],...[px,qty,cnt]]} update {"instId":"BTC-USDT","action":"update","ts":"1758326400015","asks":[["115717.8","0.18242079","6"]],"bids":[]} For this stage of our implementation we focussing on converting the data into this structure:- // A minimal, append-only columnar store with separate binary files per column. // Layout: // outdir/ // schema.json (human readable schema) // columns/ // frame.u64 // ts_ms.u64 (uint64 little-endian, ms since epoch) // side.u8 (0 = bid, 1 = ask) // etype.u8 (0 = SNAP, 1 = add, 2 = modify,3 = del, 4 = clear_bids, 5 = clear_asks) // level.u16 (0..N-1 within that frame) // px.f64 (double price) // qty.f64 (double size, amt. actually held) // count.u32 (count, number of orders) // inst_id.txt (one line: instrument name) // footer.json ({"rows": &lt;N&gt;}) // All files are append-only; caller is responsible for writing a consistent number of rows across columns. Directory Structure include - | |__mercury // (I named my project mercury) | | | |__colstore.hpp | |__ndjson_okx.hpp | |__src | |__colstore_inspect.cpp | |__okx_to_colstore.cpp Strategy Obtaining the parameters involved. (Read Stage) ---------------------- | | ---| PARSER | | |----------------------| | | |- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] |--|- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] | |- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] | | |- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] |--|- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] |- (px,qty,cnt) tuple -&gt; [Obtain Parameters via Parser function] To keep in mind the possibility of a dynamic use-case of the parameters we obtain, we dont hardcode what we do with the obtained parameters in the PARSER function itself. Instead we send a lambda function in the PARSER function. // The parse function structure in the header file -&gt; template &lt;class F&gt; inline void parse_okx_ndjson(const std::string &amp;path, F &amp;&amp;on_record) {...} // The parse function we call -&gt; mercury::parse_okx_ndjson(in_path, [&amp;](uint64_t ts_ms, uint8_t side, uint16_t level, double px, double qty, uint32_t count) { // Skip empty quantities (deletes will appear as qty=0 in some datasets) if (qty &lt;= 0.0) return; writer.append(frame, ts_ms, side, level, px, qty, count); ++emitted; if ((emitted % 1'000'000) == 0) { cerr &lt;&lt; "… " &lt;&lt; emitted &lt;&lt; " rows written\n"; } } ); writer.close(); cout &lt;&lt; "Wrote " &lt;&lt; writer.rows() &lt;&lt; " rows to " &lt;&lt; outdir &lt;&lt; "\n"; Writing out the parameters per our structure. The writer function seen above is to write the parameters we obtain down into our files. We configure a path where we can create our output columns. Create a ColWriter class with an apt constructor to open files on initilaizing. This can bring down overhead. We then use functions to write the parameters we’ve extracted into these files. The lambda funciton earlier takes care of this. We simply provide an apt append funciton to aid this process. struct Files{ std::FILE *frame = nullptr; std::FILE *ts_ms = nullptr; std::FILE *side = nullptr; std::FILE *level = nullptr; std::FILE *px = nullptr; std::FILE *qty = nullptr; std::FILE *count = nullptr; fs::path dir; uint64_t rows = 0; } class ColWriter{ public: // The constructor function will open up all the files. explicit ColWriter(filestream::path outdir, ) -&gt; outdir_(sd::move(outdir)){ check_directory_present(outdir); // if not the func will take care of creating. auto cols = outdir_ / "columns"; check_directory_present(cols); files_.dir = outdir_; files_.frame = open_or_throw(cols / "frame.u64"); files_.ts_ms = open_or_throw(cols / "ts_ms.u64"); files_.side = open_or_throw(cols / "side.u8"); // You get the idea.. (open all similarly, leaving for brevity) } ~ColWriter{ close(); } ColWriter(const ColWriter &amp;) = delete; ColWriter &amp;operator=(const ColWriter &amp;) = delete; void append(uint64_t frame, uint64_t ts_ms, uint8_t side, uint16_t level, double px, double qty, uint32_t count){ write_scalar(files_.frame, frame); write_scalar(files_.ts_ms, ts_ms); // so on.. } void safe_close(std::FILE*&amp; f){ // A reference to the pointer. We want to set caller's pointer varaible to nullptr, so we can't let the pointer be passed by value and need actual pointer. if(f){ std::fclose(f); f = nullptr; } } void close(){ if(closed_){ return; } safe_close(files_.frame); safe_close(files_.ts_ms); //so on.. } private: filestream::path outdir_; Files files_{}; } The actual code used in each file: colstore.hpp #ifndef MERCURY_COLSTORE_HPP #define MERCURY_COLSTORE_HPP #include &lt;cstdint&gt; #include &lt;cstdio&gt; #include &lt;cstring&gt; #include &lt;string&gt; #include &lt;string_view&gt; #include &lt;vector&gt; #include &lt;filesystem&gt; namespace fs = std::filesystem; #include &lt;stdexcept&gt; #include &lt;memory&gt; #include &lt;system_error&gt; #include &lt;optional&gt; #include &lt;fstream&gt; namespace mercury { struct ColFiles { std::FILE *frame = nullptr; std::FILE *ts_ms = nullptr; std::FILE *side = nullptr; std::FILE *level = nullptr; std::FILE *px = nullptr; std::FILE *qty = nullptr; std::FILE *count = nullptr; fs::path dir; uint64_t rows = 0; }; inline void ensure_dir(const fs::path &amp;p) { std::error_code ec; if (!fs::exists(p) &amp;&amp; !fs::create_directories(p, ec)) { throw std::runtime_error("Failed to create directory: " + p.string() + ", error: " + ec.message()); } } inline std::FILE *open_or_throw(const fs::path &amp;p) { auto f = std::fopen(p.string().c_str(), "wb"); if (!f) throw std::runtime_error("Failed to open for write: " + p.string()); return f; } class ColWriter { public: explicit ColWriter(fs::path outdir, std::string_view inst_id) : outdir_(std::move(outdir)) { if (inst_id.empty()) throw std::invalid_argument("inst_id is empty"); // dirs ensure_dir(outdir_); auto cols = outdir_ / "columns"; ensure_dir(cols); // schema { std::ofstream s(outdir_ / "schema.json", std::ios::binary); s &lt;&lt; "{" "\"version\": 1," "\"columns\": [" "{\"name\": \"frame\", \"type\": \"u64\", \"unit\": \"integer - a count\"}," "{\"name\": \"ts_ms\", \"type\": \"u64\", \"unit\": \"ns\"}," "{\"name\": \"side\", \"type\": \"u8\", \"desc\": \"0=bid,1=ask\"}," "{\"name\": \"level\",\"type\": \"u16\"}," "{\"name\": \"px\", \"type\": \"f64\"}," "{\"name\": \"qty\", \"type\": \"f64\"}," "{\"name\": \"count\", \"type\": \"u32\", \"desc\": \"number of orders\"}" "]" "}"; } // inst id { std::ofstream idf(cols / "inst_id.txt", std::ios::binary); idf &lt;&lt; inst_id; } files_.dir = outdir_; files_.frame = open_or_throw(cols / "frame.u64"); files_.ts_ms = open_or_throw(cols / "ts_ms.u64"); files_.side = open_or_throw(cols / "side.u8"); files_.level = open_or_throw(cols / "level.u16"); files_.px = open_or_throw(cols / "px.f64"); files_.qty = open_or_throw(cols / "qty.f64"); files_.count = open_or_throw(cols / "count.u32"); } ~ColWriter() { close(); } ColWriter(const ColWriter &amp;) = delete; ColWriter &amp;operator=(const ColWriter &amp;) = delete; void append(uint64_t frame, uint64_t ts_ms, uint8_t side, uint16_t level, double px, double qty, uint32_t count) { write_scalar(files_.frame, frame); write_scalar(files_.ts_ms, ts_ms); write_scalar(files_.side, side); write_scalar(files_.level, level); write_scalar(files_.px, px); write_scalar(files_.qty, qty); write_scalar(files_.count, count); ++files_.rows; } void safe_close(std::FILE *&amp;f) { if (f) { std::fclose(f); f = nullptr; } } void close() { if (closed_) return; safe_close(files_.frame); safe_close(files_.ts_ms); safe_close(files_.side); safe_close(files_.level); safe_close(files_.px); safe_close(files_.qty); safe_close(files_.count); // footer try { std::ofstream f(outdir_ / "footer.json", std::ios::binary); f &lt;&lt; "{\"rows\": " &lt;&lt; files_.rows &lt;&lt; "}"; } catch (...) { } closed_ = true; } uint64_t rows() const { return files_.rows; } private: template &lt;class T&gt; static void write_scalar(std::FILE *f, const T &amp;v) { if (std::fwrite(&amp;v, sizeof(T), 1, f) != 1) { throw std::runtime_error("colstore write failed"); } } fs::path outdir_; ColFiles files_{}; bool closed_ = false; }; #ifdef _WIN32 #include &lt;windows.h&gt; #else #include &lt;sys/mman.h&gt; #include &lt;fcntl.h&gt; #include &lt;unistd.h&gt; #endif struct MMap { uint8_t *ptr = nullptr; size_t len = 0; static MMap map(const fs::path &amp;p) { MMap m; // Portable fallback: read whole file into memory (fast enough for inspection) std::ifstream in(p, std::ios::binary); if (!in) throw std::runtime_error("open failed: " + p.string()); in.seekg(0, std::ios::end); m.len = static_cast&lt;size_t&gt;(in.tellg()); in.seekg(0); m.ptr = static_cast&lt;uint8_t *&gt;(std::malloc(m.len)); if (!m.ptr) throw std::bad_alloc(); in.read(reinterpret_cast&lt;char *&gt;(m.ptr), m.len); return m; } void unmap() { if (ptr) { std::free(ptr); ptr = nullptr; len = 0; } } }; } // namespace mercury #endif // MERCURY_COLSTORE_HPP ndjson_okx.hpp #ifndef MERCURY_NDJSON_OKX_HPP #define MERCURY_NDJSON_OKX_HPP #include &lt;string&gt; #include &lt;string_view&gt; #include &lt;cstdint&gt; #include &lt;stdexcept&gt; #include &lt;simdjson.h&gt; namespace mercury { // One JSON line -&gt; many rows (one per tuple in bids/asks). // on_record signature expected: void(uint64_t ts_ms, uint8_t side, uint16_t level, /// double px, double qty, uint32_t count) template &lt;class F1, class F2&gt; inline void parse_okx_ndjson(const std::string &amp;path, F1 &amp;&amp;on_record, F2 &amp;frame_id, uint64_t &amp;row_limit) { using namespace simdjson; bool continue_parsing = true; ondemand::parser parser; auto doc_result = padded_string::load(path); if (doc_result.error()) { throw std::runtime_error("Failed to load file: " + path); } padded_string &amp;doc = doc_result.value(); uint64_t emitted = 0; auto stream_res = parser.iterate_many(doc); ondemand::document_stream stream = std::move(stream_res).value(); for (simdjson::ondemand::document_reference d : stream) { frame_id++; // &lt;- increment per JSON line if (d.type().value() != simdjson::ondemand::json_type::object) continue; auto obj = d.get_object().value(); // ts may be string or number (OKX gives ms) uint64_t ts_ms = 0; if (auto ts_it = obj.find_field_unordered("ts"); ts_it.error() == SUCCESS) { auto v = ts_it.value(); if (v.type().value() == ondemand::json_type::string) { std::string s = std::string(v.get_string().value()); ts_ms = static_cast&lt;uint64_t&gt;(std::strtoull(s.c_str(), nullptr, 10)); } else { ts_ms = uint64_t(v.get_uint64().value()); } } auto maybe_stop = [&amp;](void) -&gt; bool { if (row_limit == 0) return false; return emitted &gt;= row_limit; }; // helper: emit one row per [px, qty, count?] tuple auto push_side = [&amp;](ondemand::value arr_val, uint8_t side) { if (arr_val.type().value() != ondemand::json_type::array) return; ondemand::array arr = arr_val.get_array().value(); uint16_t level = 0; for (auto lvl_res : arr) { ondemand::value lvl_v = lvl_res.value(); if (lvl_v.type().value() != ondemand::json_type::array) { ++level; continue; } ondemand::array triple = lvl_v.get_array().value(); double px = 0.0; double qty = 0.0; uint32_t count = 0; size_t idx = 0; for (auto c_res : triple) { auto c = c_res.value(); if (idx == 0) { if (c.type().value() == ondemand::json_type::string) { std::string s = std::string(c.get_string().value()); px = std::strtod(s.c_str(), nullptr); } else { px = double(c.get_double().value()); } } else if (idx == 1) { if (c.type().value() == ondemand::json_type::string) { std::string s = std::string(c.get_string().value()); qty = std::strtod(s.c_str(), nullptr); } else { qty = double(c.get_double().value()); } } else if (idx == 2) { if (c.type().value() == ondemand::json_type::string) { std::string s = std::string(c.get_string().value()); count = static_cast&lt;uint32_t&gt;(std::strtoul(s.c_str(), nullptr, 10)); } else { // Some venues encode counts as integers but ondemand lets us fetch as uint64 count = static_cast&lt;uint32_t&gt;(c.get_uint64().value()); } } ++idx; } on_record(ts_ms, side, level, px, qty, count); if (maybe_stop()) { continue_parsing = false; break; } ++level; ++emitted; } }; // bids / b if (auto it = obj.find_field_unordered("bids"); it.error() == SUCCESS) { push_side(it.value(), /*side=*/0); } else if (auto it2 = obj.find_field_unordered("b"); it2.error() == SUCCESS) { push_side(it2.value(), /*side=*/0); } // asks / a if (auto it = obj.find_field_unordered("asks"); it.error() == SUCCESS) { push_side(it.value(), /*side=*/1); } else if (auto it2 = obj.find_field_unordered("a"); it2.error() == SUCCESS) { push_side(it2.value(), /*side=*/1); } if (!continue_parsing) { break; } } } } // namespace mercury #endif // MERCURY_NDJSON_OKX_HPP okx_to_colstore.cpp #include &lt;iostream&gt; #include &lt;filesystem&gt; #include &lt;string&gt; #include &lt;string_view&gt; #include &lt;cstdlib&gt; #include &lt;simdjson.h&gt; #include "mercury/colstore.hpp" #include "mercury/ndjson_okx.hpp" using namespace std; int main(int argc, char **argv) { if (argc &lt; 4) { cerr &lt;&lt; "Usage: okx_to_colstore &lt;input.data&gt; &lt;out_dir&gt; &lt;instId&gt;\n"; cerr &lt;&lt; "Example: okx_to_colstore BTC-USDT-L2orderbook-400lv-2025-09-20.data out/BTC-USDT BTC-USDT\n"; return 1; } const string in_path = argv[1]; const filesystem::path outdir = argv[2]; const string inst_id = argv[3]; uint64_t row_limit = 0; if (argc &gt;= 5) { row_limit = std::strtoull(argv[4], nullptr, 10); } try { mercury::ColWriter writer(outdir, inst_id); size_t emitted = 0; uint64_t frame = 0; mercury::parse_okx_ndjson(in_path, [&amp;](uint64_t ts_ms, uint8_t side, uint16_t level, double px, double qty, uint32_t count) { if (qty &lt;= 0.0) return; writer.append(frame, ts_ms, side, level, px, qty, count); ++emitted; if ((emitted % 1'000'000) == 0) { cerr &lt;&lt; "… " &lt;&lt; emitted &lt;&lt; " rows written\n"; } }, frame, row_limit); writer.close(); cout &lt;&lt; "Wrote " &lt;&lt; writer.rows() &lt;&lt; " rows to " &lt;&lt; outdir &lt;&lt; "\n"; } catch (const std::exception &amp;e) { cerr &lt;&lt; "ERROR: " &lt;&lt; e.what() &lt;&lt; "\n"; return 2; } return 0; }]]></summary></entry><entry><title type="html">WSL</title><link href="https://p-dhanush.github.io/notes/2025/10/15/WSL.html" rel="alternate" type="text/html" title="WSL" /><published>2025-10-15T00:00:00+05:30</published><updated>2025-10-15T00:00:00+05:30</updated><id>https://p-dhanush.github.io/notes/2025/10/15/WSL</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2025/10/15/WSL.html"><![CDATA[<hr />
<p>title: “WSL Notes”
description: “A living document of how WSL and practical tips to use it.”
last_updated: 2025-10-15
tags: [wsl, linux, windows, bash, powershell, dev-setup]
—</p>

<h1 id="wsl-notes">WSL Notes</h1>

<blockquote>
  <p>A structured, evolving reference for understanding <strong>WSL (Windows Subsystem for Linux)</strong> from fundamentals to daily workflows, including <strong>Bash vs PowerShell</strong>, <strong>WSL1 vs WSL2</strong>, filesystem interop, networking, performance, automation, and common recipes.</p>
</blockquote>

<hr />

<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li><a href="#1-first-principles">1. First Principles</a>
    <ul>
      <li><a href="#11-what-is-an-os-kernel-and-userspace">1.1 What is an OS, kernel, and userspace?</a></li>
      <li><a href="#12-where-wsl-fits-in">1.2 Where WSL fits in</a></li>
      <li><a href="#13-wsl1-vs-wsl2">1.3 WSL1 vs WSL2</a></li>
    </ul>
  </li>
  <li><a href="#2-shells--environments">2. Shells &amp; Environments</a>
    <ul>
      <li><a href="#21-bash-linux-vs-powershell-windows">2.1 Bash (Linux) vs PowerShell (Windows)</a></li>
      <li><a href="#22-profiles-bashrc-profile-powershell-profiles">2.2 Profiles: <code class="language-plaintext highlighter-rouge">.bashrc</code>, <code class="language-plaintext highlighter-rouge">.profile</code>, PowerShell profiles</a></li>
      <li><a href="#23-environment-variables">2.3 Environment variables</a></li>
    </ul>
  </li>
  <li><a href="#3-filesystems--paths">3. Filesystems &amp; Paths</a>
    <ul>
      <li><a href="#31-wsl-filesystem-vs-windows-drives">3.1 WSL filesystem vs Windows drives</a></li>
      <li><a href="#32-performance--file-watching">3.2 Performance &amp; file-watching</a></li>
      <li><a href="#33-line-endings--permissions">3.3 Line endings &amp; permissions</a></li>
    </ul>
  </li>
  <li><a href="#4-processes-networking-interop">4. Processes, Networking, Interop</a>
    <ul>
      <li><a href="#41-running-windows-apps-from-wsl--vice-versa">4.1 Running Windows apps from WSL &amp; vice versa</a></li>
      <li><a href="#42-networking-model">4.2 Networking model</a></li>
      <li><a href="#43-clipboard--file-association-tips">4.3 Clipboard &amp; file association tips</a></li>
    </ul>
  </li>
  <li><a href="#5-package-managers--toolchains">5. Package Managers &amp; Toolchains</a>
    <ul>
      <li><a href="#51-apt-vs-wingetchoco">5.1 apt vs winget/choco</a></li>
      <li><a href="#52-compilers-build-tools-python-node-ruby">5.2 Compilers, build tools, Python, Node, Ruby</a></li>
    </ul>
  </li>
  <li><a href="#6-git--projects">6. Git &amp; Projects</a>
    <ul>
      <li><a href="#61-where-to-clone-projects">6.1 Where to clone projects</a></li>
      <li><a href="#62-git-config--crlf-handling">6.2 Git config &amp; CRLF handling</a></li>
    </ul>
  </li>
  <li><a href="#7-daily-recipes-copy-paste-friendly">7. Daily Recipes (Copy-Paste Friendly)</a></li>
  <li><a href="#8-troubleshooting--diagnostics">8. Troubleshooting &amp; Diagnostics</a></li>
  <li><a href="#9-security--backups">9. Security &amp; Backups</a></li>
  <li><a href="#10-comparative-analysis-quick-reference">10. Comparative Analysis (Quick Reference)</a></li>
  <li><a href="#11-glossary">11. Glossary</a></li>
  <li><a href="#12-further-reading">12. Further Reading</a></li>
  <li><a href="#appendix-a-personal-setup-checklists">Appendix A: Personal Setup Checklists</a></li>
  <li><a href="#appendix-b-snippets">Appendix B: Snippets</a></li>
</ul>

<hr />

<h2 id="1-first-principles">1. First Principles</h2>

<h3 id="11-what-is-an-os-kernel-and-userspace">1.1 What is an OS, kernel, and userspace?</h3>
<ul>
  <li><strong>Kernel:</strong> manages hardware, processes, memory, filesystems, networking.</li>
  <li><strong>Userspace:</strong> shells, tools, libraries, apps.</li>
  <li><strong>Linux vs Windows:</strong> different kernels → different system calls &amp; tooling.</li>
</ul>

<blockquote>
  <p>Add notes/examples:</p>
  <ul class="task-list">
    <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Example: <code class="language-plaintext highlighter-rouge">strace</code> (Linux) vs Process Monitor (Windows)</li>
    <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Syscalls vs Win32 APIs</li>
  </ul>
</blockquote>

<h3 id="12-where-wsl-fits-in">1.2 Where WSL fits in</h3>
<ul>
  <li><strong>WSL</strong> = run a <strong>Linux userspace</strong> on Windows.</li>
  <li><strong>WSL1:</strong> syscall translation layer → Linux syscalls translated to Windows kernel calls.</li>
  <li><strong>WSL2:</strong> lightweight VM running a real Linux kernel → higher compatibility/perf, different networking/filesystem behavior.</li>
</ul>

<h3 id="13-wsl1-vs-wsl2">1.3 WSL1 vs WSL2</h3>
<p>| Aspect | WSL1 | WSL2 |
|—|—|—|
| Kernel | Translation layer | Real Linux kernel (in a managed VM) |
| FS Perf (Linux home) | N/A | Fast |
| FS Perf (<code class="language-plaintext highlighter-rouge">/mnt/c/...</code>) | Generally fast | Slower; use for <em>access</em>, not hot dev |
| Inotify/File watch | Bridged | Native in Linux FS; flaky on <code class="language-plaintext highlighter-rouge">/mnt/*</code> |
| Networking | Shares host IP | NAT/virtualized; different IP |
| Compatibility | Good, not perfect | Very high |</p>

<blockquote>
  <p>Choose <strong>WSL2</strong> for most dev. Keep repos in <strong><code class="language-plaintext highlighter-rouge">~/</code></strong> (Linux FS). Use <code class="language-plaintext highlighter-rouge">/mnt/*</code> for occasional access to Windows files.</p>
</blockquote>

<hr />

<h2 id="2-shells--environments">2. Shells &amp; Environments</h2>

<h3 id="21-bash-linux-vs-powershell-windows">2.1 Bash (Linux) vs PowerShell (Windows)</h3>
<p>| Topic | Bash | PowerShell |
|—|—|—|
| Prompt style | <code class="language-plaintext highlighter-rouge">$</code> | <code class="language-plaintext highlighter-rouge">PS C:\&gt;</code> |
| Scripting | <code class="language-plaintext highlighter-rouge">#!/usr/bin/env bash</code> | <code class="language-plaintext highlighter-rouge">.ps1</code>, PowerShell syntax |
| Env var set | <code class="language-plaintext highlighter-rouge">FOO=bar cmd</code> or <code class="language-plaintext highlighter-rouge">export FOO=bar</code> | <code class="language-plaintext highlighter-rouge">$env:FOO='bar'; cmd</code> |
| Path sep | <code class="language-plaintext highlighter-rouge">/home/user</code> | <code class="language-plaintext highlighter-rouge">C:\Users\User</code> |
| Pipe objects? | Text streams | .NET objects |</p>

<blockquote>
  <p>Use <strong>Bash inside WSL</strong> for Linux tooling &amp; package managers; <strong>PowerShell</strong> for Windows-side automation.</p>
</blockquote>

<h3 id="22-profiles-bashrc-profile-powershell-profiles">2.2 Profiles: <code class="language-plaintext highlighter-rouge">.bashrc</code>, <code class="language-plaintext highlighter-rouge">.profile</code>, PowerShell profiles</h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">~/.bashrc</code></strong>: runs for interactive Bash shells; good for aliases, exports.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">~/.profile</code> / <code class="language-plaintext highlighter-rouge">~/.bash_profile</code></strong>: login shell config.</li>
  <li><strong>PowerShell profile</strong>: see <code class="language-plaintext highlighter-rouge">$PROFILE</code> for path; customize aliases &amp; functions.</li>
</ul>

<p>Common Bash additions:
```bash</p>
<h1 id="bashrc">~/.bashrc</h1>
<p>export GEM_HOME=”$HOME/.gems”
export PATH=”$HOME/.gems/bin:$PATH”
alias ll=’ls -lah’
alias jserve=’bundle exec jekyll serve –livereload –drafts –future –force_polling’</p>]]></content><author><name></name></author><category term="notes" /><category term="jekyll" /><category term="howto" /><summary type="html"><![CDATA[title: “WSL Notes” description: “A living document of how WSL and practical tips to use it.” last_updated: 2025-10-15 tags: [wsl, linux, windows, bash, powershell, dev-setup] — WSL Notes A structured, evolving reference for understanding WSL (Windows Subsystem for Linux) from fundamentals to daily workflows, including Bash vs PowerShell, WSL1 vs WSL2, filesystem interop, networking, performance, automation, and common recipes. Table of Contents 1. First Principles 1.1 What is an OS, kernel, and userspace? 1.2 Where WSL fits in 1.3 WSL1 vs WSL2 2. Shells &amp; Environments 2.1 Bash (Linux) vs PowerShell (Windows) 2.2 Profiles: .bashrc, .profile, PowerShell profiles 2.3 Environment variables 3. Filesystems &amp; Paths 3.1 WSL filesystem vs Windows drives 3.2 Performance &amp; file-watching 3.3 Line endings &amp; permissions 4. Processes, Networking, Interop 4.1 Running Windows apps from WSL &amp; vice versa 4.2 Networking model 4.3 Clipboard &amp; file association tips 5. Package Managers &amp; Toolchains 5.1 apt vs winget/choco 5.2 Compilers, build tools, Python, Node, Ruby 6. Git &amp; Projects 6.1 Where to clone projects 6.2 Git config &amp; CRLF handling 7. Daily Recipes (Copy-Paste Friendly) 8. Troubleshooting &amp; Diagnostics 9. Security &amp; Backups 10. Comparative Analysis (Quick Reference) 11. Glossary 12. Further Reading Appendix A: Personal Setup Checklists Appendix B: Snippets 1. First Principles 1.1 What is an OS, kernel, and userspace? Kernel: manages hardware, processes, memory, filesystems, networking. Userspace: shells, tools, libraries, apps. Linux vs Windows: different kernels → different system calls &amp; tooling. Add notes/examples: Example: strace (Linux) vs Process Monitor (Windows) Syscalls vs Win32 APIs 1.2 Where WSL fits in WSL = run a Linux userspace on Windows. WSL1: syscall translation layer → Linux syscalls translated to Windows kernel calls. WSL2: lightweight VM running a real Linux kernel → higher compatibility/perf, different networking/filesystem behavior. 1.3 WSL1 vs WSL2 | Aspect | WSL1 | WSL2 | |—|—|—| | Kernel | Translation layer | Real Linux kernel (in a managed VM) | | FS Perf (Linux home) | N/A | Fast | | FS Perf (/mnt/c/...) | Generally fast | Slower; use for access, not hot dev | | Inotify/File watch | Bridged | Native in Linux FS; flaky on /mnt/* | | Networking | Shares host IP | NAT/virtualized; different IP | | Compatibility | Good, not perfect | Very high | Choose WSL2 for most dev. Keep repos in ~/ (Linux FS). Use /mnt/* for occasional access to Windows files. 2. Shells &amp; Environments 2.1 Bash (Linux) vs PowerShell (Windows) | Topic | Bash | PowerShell | |—|—|—| | Prompt style | $ | PS C:\&gt; | | Scripting | #!/usr/bin/env bash | .ps1, PowerShell syntax | | Env var set | FOO=bar cmd or export FOO=bar | $env:FOO='bar'; cmd | | Path sep | /home/user | C:\Users\User | | Pipe objects? | Text streams | .NET objects | Use Bash inside WSL for Linux tooling &amp; package managers; PowerShell for Windows-side automation. 2.2 Profiles: .bashrc, .profile, PowerShell profiles ~/.bashrc: runs for interactive Bash shells; good for aliases, exports. ~/.profile / ~/.bash_profile: login shell config. PowerShell profile: see $PROFILE for path; customize aliases &amp; functions. Common Bash additions: ```bash ~/.bashrc export GEM_HOME=”$HOME/.gems” export PATH=”$HOME/.gems/bin:$PATH” alias ll=’ls -lah’ alias jserve=’bundle exec jekyll serve –livereload –drafts –future –force_polling’]]></summary></entry><entry><title type="html">Testing All The Features</title><link href="https://p-dhanush.github.io/notes/2015/10/13/my-feature-test.html" rel="alternate" type="text/html" title="Testing All The Features" /><published>2015-10-13T00:00:00+05:30</published><updated>2015-10-13T00:00:00+05:30</updated><id>https://p-dhanush.github.io/notes/2015/10/13/my-feature-test</id><content type="html" xml:base="https://p-dhanush.github.io/notes/2015/10/13/my-feature-test.html"><![CDATA[<h1 id="my-first-post-a-feature-test">My First Post: A Feature Test</h1>

<p>This post is a demonstration of all the formatting capabilities available in a GitHub Pages blog using Jekyll and Markdown. We will cover everything from basic text formatting to advanced embeds.</p>

<p>This text is <strong>bold</strong> and this text is <em>italic</em>. It’s easy to add emphasis wherever you need it.</p>

<h2 id="lists-and-organization">Lists and Organization</h2>

<p>Sometimes you need to organize information into lists.</p>

<p><strong>An Unordered List:</strong></p>
<ul>
  <li>Item one</li>
  <li>Item two
    <ul>
      <li>A nested item</li>
    </ul>
  </li>
  <li>Item three</li>
</ul>

<p><strong>An Ordered List:</strong></p>
<ol>
  <li>First, we do this.</li>
  <li>Second, we do that.</li>
  <li>Finally, we are done.</li>
</ol>

<h2 id="adding-images">Adding Images</h2>

<p>Yes, you can absolutely add an image. First, upload the image file to your repository (a good practice is to create an <code class="language-plaintext highlighter-rouge">assets/images</code> folder). Then, link to it like this:</p>

<p><img src="/assets/images/firstss.png" alt="A descriptive caption for my sample image" /></p>

<h2 id="displaying-code-snippets">Displaying Code Snippets</h2>

<p>Displaying code is crucial for a technical blog. Here is a sample Python function with proper syntax highlighting.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A simple function to greet a user
</span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
  <span class="s">"""This function takes a name and prints a greeting."""</span>
  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">! Welcome to the blog."</span><span class="p">)</span>

<span class="c1"># Let's call the function
</span><span class="n">greet</span><span class="p">(</span><span class="s">"World"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="embedding-an-interactive-datawrapper-chart">Embedding an Interactive Datawrapper Chart</h2>

<iframe title="Some repricing info'" aria-label="Map" id="datawrapper-chart-epn3b" src="https://datawrapper.dwcdn.net/epn3b/2/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="435" data-external="1"></iframe>

<iframe title="Some repricing info'" aria-label="Map" id="datawrapper-chart-epn3b" src="https://datawrapper.dwcdn.net/epn3b/2/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="435" data-external="1"></iframe>

<p><img src="/assets/images/firstss.png" alt="A descriptive caption for my sample image" /></p>]]></content><author><name></name></author><category term="notes" /><category term="jekyll" /><category term="howto" /><summary type="html"><![CDATA[My First Post: A Feature Test This post is a demonstration of all the formatting capabilities available in a GitHub Pages blog using Jekyll and Markdown. We will cover everything from basic text formatting to advanced embeds. This text is bold and this text is italic. It’s easy to add emphasis wherever you need it. Lists and Organization Sometimes you need to organize information into lists. An Unordered List: Item one Item two A nested item Item three An Ordered List: First, we do this. Second, we do that. Finally, we are done. Adding Images Yes, you can absolutely add an image. First, upload the image file to your repository (a good practice is to create an assets/images folder). Then, link to it like this: Displaying Code Snippets Displaying code is crucial for a technical blog. Here is a sample Python function with proper syntax highlighting. # A simple function to greet a user def greet(name): """This function takes a name and prints a greeting.""" print(f"Hello, {name}! Welcome to the blog.") # Let's call the function greet("World") Embedding an Interactive Datawrapper Chart]]></summary></entry></feed>